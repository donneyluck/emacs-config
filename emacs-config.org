#+title: Emacs 配置文件
#+author: donney.luck
#+date: 2023/04/15 14:23:50
#+startup: overview
#+property: header-args:emacs-lisp :comments link :mkdirp yes
* early-init.el
:properties:
:HEADER-ARGS: :tangle early-init.el
:end:
=early-init.el= 在Emacs刚启动，还未加载主要配置文件时的配置文件。
#+begin_src emacs-lisp
;;; early-init.el --- MinEmacs early initialization tweaks -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:

(setq
 ;; Do not make installed packages available when Emacs starts
 package-enable-at-startup nil
 ;; HACK: Increase the garbage collection (GC) threshold for faster startup.
 ;; This will be overwritten when `gcmh-mode' (a.k.a. the Garbage Collector
 ;; Magic Hack) gets loaded in the `me-gc' module (see "init.el").
 gc-cons-threshold most-positive-fixnum
 ;; Do not wast time checking the modification time of each file
 load-prefer-newer noninteractive
 ;; Remove some unneeded UI elements
 default-frame-alist '((tool-bar-lines . 0)
                       (menu-bar-lines . 0)
                       (vertical-scroll-bars)
                       (mouse-color . "blue")
                       (left-fringe . 8)
                       (right-fringe . 13)
                       (fullscreen . maximized))
 ;; Explicitly set modes disabled in `default-frame-alist' to nil
 tool-bar-mode nil
 menu-bar-mode nil
 scroll-bar-mode nil)

;; NOTE: In Emacs29+, frames can have a transparent background via the
;; `alpha-background' parameter. For a better experience, this value should be
;; set early before any frame gets created (i.e. in "early-init.el"). MinEmacs
;; uses the "$MINEMACS_ALPHA" environment variable that can be set to an integer
;; value in the [1-100] range (the alpha percentage). When this variable is not
;; set, Emacs will load the default GUI (without background alpha), and when it
;; is set but the value is not valid, MinEmacs will fallback to the default
;; alpha of 93%.
(when (>= emacs-major-version 29)
  (when-let* ((alpha (getenv "MINEMACS_ALPHA"))
              (alpha (string-to-number alpha)))
    (push (cons 'alpha-background (if (or (zerop alpha) (> alpha 100)) 93 alpha))
          default-frame-alist)))

;; HACK: In `lsp-mode' (see the `me-lsp' module), the user can define the
;; "$LSP_USE_PLISTS=true" to improve `lsp-mode' performances. We set this
;; environment variable here so we don't need to add it to the system's
;; environment variables.
(setenv "LSP_USE_PLISTS" "true")

;; Load MinEmacs variables from the `me-vars' core module.
(load (expand-file-name "core/me-vars.el" (file-name-directory (file-truename load-file-name))) nil t)

;; Load the user early configuration file from "$MINEMACSDIR/early-config.el"
;; if it exists.
(let ((early-config-path (concat minemacs-config-dir "early-config.el")))
  (when (file-exists-p early-config-path)
    (load early-config-path nil (not minemacs-verbose))))

;;; early-init.el ends here
#+end_src
* init.el
:properties:
:HEADER-ARGS: :tangle init.el
:end:
=init.el= 是Emacs的主要配置文件。
** init.el 文件头
#+begin_src emacs-lisp
;; init.el --- MinEmacs core initialization file -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:

#+end_src
** init.el 版本检测
#+begin_src emacs-lisp
;; Check if Emacs version is supported. You can define the
;; $MINEMACS_IGNORE_VERSION_CHECK environment variable to ignore this check.
;; This can be useful if you are stuck with an old Emacs version and you've
;; incrementally implemented the new Emacs routines MinEmacs needs in your
;; "init-tweaks.el".
(let ((min-ver "28.0"))
  (when (and (version< emacs-version min-ver) (not (getenv "MINEMACS_IGNORE_VERSION_CHECK")))
    (error "Emacs v%s is not supported, MinEmacs requires v%s or higher" emacs-version min-ver)))

#+end_src
** init.el 提高启动速度
#+begin_src emacs-lisp
;; PERF: Setting `file-name-handler-alist' to nil should boost startup time.
;; reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start
;; Store the current value so we can reset it after Emacs startup.
(put 'file-name-handler-alist 'original-value (default-toplevel-value 'file-name-handler-alist))
;; Make sure the new value survives any current let-binding.
(set-default-toplevel-value 'file-name-handler-alist nil)
;; After Emacs startup, we restore `file-name-handler-alist' while conserving
;; the potential edits made during startup.
(add-hook
 'emacs-startup-hook
 (defun +mineamcs--restore-file-name-handler-alist-h ()
   (setq file-name-handler-alist
         (delete-dups
          (append file-name-handler-alist
                  (get 'file-name-handler-alist 'original-value)))))
 101)

#+end_src
** init.el 载入定义的vars
#+begin_src emacs-lisp
;; HACK: At this point, MinEmacs variables defined in `me-vars' should be
;; already loaded (in "early-init.el"). However, we double-check here and load
;; them if necessary in case Emacs has been loaded directly from "init.el"
;; without passing by "early-init.el". This can happen when we are running in a
;; `me-org-export-async-init' context, or if we use some bootstrapping mechanism
;; like Chemacs2.
(unless (featurep 'me-vars)
  (load (expand-file-name "core/me-vars.el" (file-name-directory (file-truename load-file-name))) nil t))

(defun +load (&rest filename-parts)
  "Load a file, the FILENAME-PARTS are concatenated to form the file name."
  (let ((filename (mapconcat #'identity filename-parts nil)))
    (if (file-exists-p filename)
        (load filename nil (not minemacs-verbose))
      (user-error "[MinEmacs:Error] Cannot load \"%s\", the file doesn't exists." filename))))

;; HACK: Most core and third-party packages depends on the
;; `user-emacs-directory' variable to store some cache information and generated
;; configuration files. However, this will mess with MinEmacs' directory (which
;; defaults to `user-emacs-directory'). To keep the "~/.emacs.d/" directory
;; clean, we overwrite the `user-emacs-directory' with `minemacs-local-dir' so
;; all generated files gets stored in "~/.emacs.d/local/".
;; BUG: It is important to set this here and not in `me-vars' nor in
;; "early-init.el", otherwise, it won't work with Chemacs2-based installations.
(setq user-emacs-directory minemacs-local-dir)
#+end_src
** init.el 向后兼容一些函数(>=emacs29)
#+begin_src emacs-lisp
;; HACK: Load Emacs 29 back ports for earlier Emacs versions. Note that I do
;; only back port a very small number of the functions/variables that I use at
;; early stage from Emacs29+ to be compatible with Emacs 28.2. For any Emacs
;; version less than 29, MinEmacs will enable the `me-compat' module and load it
;; just after `me-bootstrap'. This module loads the `compat' package which
;; provide several forward compatibility functions, it is loaded at an early
;; stage to provide its functionality to the rest of the modules so we can use
;; some new features when configuring them.
(when (< emacs-major-version 29)
  (+load minemacs-modules-dir "me-backports-29.el"))

#+end_src
** init.el =debug-on-error=
#+begin_src emacs-lisp
(setq
 ;; Enable debugging on error when Emacs is launched with the "--debug-init"
 ;; option or when the environment variable "$MINEMACS_DEBUG" is defined (see
 ;; `me-vars').
 debug-on-error minemacs-debug
 ;; Decrese the warning type to `:error', unless we are running in verbose mode
 warning-minimum-level (if minemacs-verbose :warning :error)
 warning-minimum-log-level warning-minimum-level
 ;; Make byte compilation less noisy
 byte-compile-warnings minemacs-verbose
 byte-compile-verbose minemacs-verbose)

#+end_src
** init.el =native-compile=
#+begin_src emacs-lisp
;; Native compilation settings
(when (featurep 'native-compile)
  (setq
   ;; Silence compiler warnings as they can be pretty disruptive, unless we are
   ;; running in `minemacs-verbose' mode.
   native-comp-async-report-warnings-errors (when minemacs-verbose 'silent)
   native-comp-verbose (if minemacs-verbose 1 0) ; do not be too verbose
   native-comp-debug (if minemacs-debug 1 0)
   ;; Make native compilation happens asynchronously.
   native-comp-jit-compilation t)

  ;; Set the right directory to store the native compilation cache to avoid
  ;; messing with "~/.emacs.d/".
  (startup-redirect-eln-cache (concat minemacs-cache-dir "eln/")))

#+end_src
** init.el =loaddefs-generate=
#+begin_src emacs-lisp
;; Add some of MinEmacs' directories to `load-path'.
(setq load-path (append (list minemacs-core-dir minemacs-elisp-dir minemacs-extras-dir) load-path))

(defun minemacs-generate-loaddefs ()
  "Generate MinEmacs' loaddefs file."
  (interactive)
  (when (file-exists-p minemacs-loaddefs-file)
    (delete-file minemacs-loaddefs-file))

  (loaddefs-generate
   (list minemacs-core-dir minemacs-elisp-dir minemacs-extras-dir)
   minemacs-loaddefs-file))

;; Some of MinEmacs commands and libraries are defined to be auto-loaded. In
;; particular, these in the `minemacs-core-dir', `minemacs-elisp-dir', and
;; `minemacs-extras-dir' directories. The generated loaddefs file will be stored
;; in `minemacs-loaddefs-file'. We first regenerate the loaddefs file if it
;; doesn't exist.
(unless (file-exists-p minemacs-loaddefs-file)
  (minemacs-generate-loaddefs))

;; Then we load the loaddefs file
(+load minemacs-loaddefs-file)

#+end_src
** init.el load init-tweak.el
#+begin_src emacs-lisp
;; Load user init tweaks from "$MINEMACSDIR/init-tweaks.el" when available
;; (let ((user-init-tweaks (concat minemacs-config-dir "init-tweaks.el")))
;;   (when (file-exists-p user-init-tweaks)
;;     (+load user-init-tweaks)))

#+end_src
** init.el load environment vars
#+begin_src emacs-lisp
;; HACK: When Emacs is launched from the terminal (in GNU/Linux), it inherits
;; the terminal's environment variables, which can be useful specially for
;; running commands under a custom "$PATH" directory. But when Emacs is launched
;; from the desktop manager (KDE, Gnome, etc.), it can omit the terminal's
;; environment variables. The way I solve this is by launching Emacs from
;; terminal, which gives Emacs the full environment variables of the invoking
;; terminal. Then I call the `+env-save' command, which reads the environment
;; variables defined in `+env-save-vars' and stores them in
;; "~/.emacs.d/local/system-env.el". This file is then loaded in the future
;; Emacs sessions (launched either from terminal or from GUI) by calling the
;; `+env-load' command.
(+env-load) ; Load environment variables when available.

#+end_src
** init.el load =packages= and =user =customization=
#+begin_src emacs-lisp
;; NOTE: This is MinEmacs' synchronization point. To get a fast Emacs startup,
;; MinEmacs tries to defer loading most of its packages until this hook is
;; executed. This is managed by the `minemacs-loaded' and `minemacs-lazy'
;; pseudo-modules. After loading Emacs, the `emacs-startup-hook' gets executed,
;; we use this hook to profile the startup time, load the fonts and the theme,
;; and setup the *scratch* buffer content. Lastly we require the
;; `minemacs-loaded' synchronization module, which runs internally the
;; `minemacs-after-startup-hook' hooks and provide `minemacs-loaded' so the
;; packages loaded with `:after minemacs-loaded' can be loaded. The
;; `minemacs-loaded' will require `minemacs-lazy' when Emacs goes idle, this
;; pseudo-module provides `minemacs-lazy' so the packages loaded with `:after
;; minemacs-lazy' can be loaded then it incrementally run the hooks in
;; `minemacs-lazy-hook' when Emacs goes idle.
(defun +minemacs--loaded-h ()
  (+log! "=============== Loaded Emacs ===============")
  (+info! "Loaded Emacs in %s." (emacs-init-time))

  ;; When running in an async Org export context, there is no need to set
  ;; the fonts, load the theme or play with the scratch buffer.
  (unless (featurep 'me-org-export-async-init)
    (+log! "Applying `minemacs-fonts'.")
    ;; Load fonts, values are read from `minemacs-fonts' if set in config.el,
    ;; otherwise, they are read from the default `minemacs-default-fonts'.
    (+set-fonts)

    ;; Initially MinEmacs loads the `doom-one-light' theme, and when
    ;; `minemacs-theme' is set in user configuration, it is loaded here.
    (+load-theme)

    (+log! "Filling scratch buffer content.")
    (+fill-scratch-buffer)

    ;; In `me-defaults', the `initial-major-mode' is set to `fundamental-mode'
    ;; to enhance startup time. However, I like to use the scratch buffer to
    ;; evaluate Elisp code, so we switch to Elisp mode in the scratch buffer
    ;; when Emacs is idle for 10 seconds.
    (+eval-when-idle-for! 10.0
      (setq initial-major-mode 'emacs-lisp-mode)
      (with-current-buffer (get-scratch-buffer-create)
        (emacs-lisp-mode))))

  ;; Require the virtual package to triggre loading packages depending on it
  (require 'minemacs-loaded))

;; Add it to the very begining of `emacs-startup-hook'
(add-hook 'emacs-startup-hook #'+minemacs--loaded-h -101)

;; ========= Load MinEmacs packages and user customization =========
;; When running in an async Org export context, the used modules are set in
;; modules/extras/me-org-export-async-init.el, so we must not overrite them with
;; the user's enabled modules.
(if (featurep 'me-org-export-async-init)
    (progn (message "Loading \"init.el\" in an org-export-async context.")
           (setq minemacs-not-lazy t)
           (require 'minemacs-loaded))
  ;; Load the default list of enabled modules (`minemacs-modules' and `minemacs-core-modules')
  (+load minemacs-core-dir "me-modules.el")

  ;; The modules.el file can override minemacs-modules and minemacs-core-modules
  (let ((user-conf-modules (concat minemacs-config-dir "modules.el")))
    (when (file-exists-p user-conf-modules)
      (+load user-conf-modules))))

;; Load fonts early (they are read from the default `minemacs-default-fonts').
(+set-fonts)

;; NOTE: Ensure the `me-gc' module is in the core modules list. This module
;; enables the `gcmh-mode' package (a.k.a. the Garbage Collector Magic Hack).
;; This GCMH minimizes GC interference with the activity by using a high GC
;; threshold during normal use, then when Emacs is idling, GC is triggered and a
;; low threshold is set. In MinEmacs, we set the threshold (`gc-cons-threshold'
;; variable) to an unlimited size in "early-init.el", this helps improving the
;; startup time, but needs to be set down to a more reasonable value after Emacs
;; gets loaded. The use of `gcmh-mode' ensures reverting this value so we don't
;; need to do it manually.
;; NOTE: Ensure the `me-defaults', `me-splash', `me-bootstrap' and `me-compat'
;; modules are in the right order. The `me-compat' should be loaded just after
;; `me-bootstrap' once `straight' and `use-package' are set up. This enables us
;; to use some of the new Emacs 29 functions even on earlier Emacs versions,
;; this can be useful when configuring the module's packages and adding new
;; functionality.
(setq minemacs-core-modules
      (delete-dups
       (append
        '(me-defaults)
        (when (memq 'me-splash minemacs-core-modules) '(me-splash))
        '(me-bootstrap)
        (when (< emacs-major-version 29) '(me-compat))
        '(me-builtin me-gc)
        minemacs-core-modules)))

;; Load MinEmacs modules
(dolist (module-file (append
                      (mapcar (apply-partially #'format "%s%s.el" minemacs-core-dir) minemacs-core-modules)
                      (mapcar (apply-partially #'format "%s%s.el" minemacs-modules-dir) minemacs-modules)))
  (+load module-file))

;; Write user custom variables to separate file instead of "init.el"
(setq custom-file (concat minemacs-config-dir "custom-vars.el"))

;; Load the custom variables file if it exists
(when (file-exists-p custom-file)
  (+load custom-file))

;; Load user configuration from "$MINEMACSDIR/config.el" when available
(let ((user-config (concat minemacs-config-dir "config.el")))
  (when (file-exists-p user-config)
    (+load user-config)))

(+lazy-when! (featurep 'native-compile)
  (+info! "Trying to clean outdated native compile cache")
  ;; Delete outdated natively compiled files when Emacs become idle
  (+shutup! (native-compile-prune-cache)))

(+log! "Loaded init.el")

#+end_src
** init.el 文件尾
#+begin_src emacs-lisp
;;; init.el ends here
#+end_src
* core
=core= 目录下是框架的核心配置
** me-bootstrap.el
:properties:
:header-args: :tangle core/me-bootstrap.el
:end:
=me-bootstrap.el= 设置包下载器和包安装器
*** me-bootstrap.el 文件头
#+begin_src emacs-lisp
;; me-bootstrap.el --- Bootstrap packages (straight & use-package) -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** me-bootstrap.el 安装 =straight= 包下载器
#+begin_src emacs-lisp
(setq
 ;; Base directory
 straight-base-dir minemacs-local-dir
 ;; Add Emacs version and the Git hash to the build directory to avoid problems
 straight-build-dir (format "build-%s%s" emacs-version
                            (if emacs-repository-version
                                (format "-%s" (substring emacs-repository-version 0 8))
                              ""))
 ;; Use the "develop" branch on straight.el's repo.
 straight-repository-branch (if (>= emacs-major-version 29) "develop" "master")
 ;; Do not slow startup by checking for package modifs, check only on demand
 straight-check-for-modifications '(check-on-save find-when-checking))

;; Bootstraping straight.el
;; See: github.com/radian-software/straight.el#bootstrapping-straightel
(defvar bootstrap-version)
(let ((bootstrap-file (concat straight-base-dir "straight/repos/straight.el/bootstrap.el"))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src
*** me-bootstarp.el 安装 =use-package= 包管理器
#+begin_src emacs-lisp
;; Configure `use-package'
(unless (require 'use-package nil t)
  (straight-use-package 'use-package))

;; Add the `:pin-ref' extension to `use-package'
(require 'me-use-package-pin-ref)

(setq
 ;; Set `use-package' to verbose when MinEmacs is started in verbose mode
 use-package-verbose minemacs-verbose
 ;; Defer loading packages by default, use `:demand' to force loading a package
 use-package-always-defer t)
#+end_src
*** me-bootstarp.el 文件尾
#+begin_src emacs-lisp
(provide 'me-bootstrap)
;;; me-bootstrap.el ends here
#+end_src
** me-buildin.el
:properties:
:header-args: :tangle core/me-buildin.el
:end:
=me-buildin.el= 管理一些内置包
*** me-buildin.el 文件头
#+begin_src emacs-lisp
;;; me-builtin.el --- Customization of some of Emacs' builtin libraries -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** me-buildin.el buildin libraries
#+begin_src emacs-lisp
(use-package transient
  :straight (:type built-in)
  :config
  ;; Map ESC and q to quit transient
  (define-key transient-map [escape]  #'transient-quit-one)
  (define-key transient-map (kbd "q") #'transient-quit-one))

(use-package map
  :straight (:type built-in))

(use-package let-alist
  :straight (:type built-in))

#+end_src
*** me-buildin.el 文件尾
#+begin_src emacs-lisp
(provide 'me-buildin)
;;; me-buildin ends here
#+end_src
** me-compat.el
:properties:
:header-args: :tangle core/me-compat.el
:end:
=me-compat.el= 向前兼容的能力
*** me-compat.el 文件头
#+begin_src emacs-lisp
;;; me-compat.el --- Emacs forward compatibility layer -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** me-compat.el package [[https://github.com/emacs-compat/compat][compat]]
#+begin_src emacs-lisp
(use-package compat
  :straight t
  :demand t)
#+end_src
*** me-compat.el 文件尾
#+begin_src emacs-lisp
(provide 'me-compat)
;;; me-compat ends here
#+end_src
** me-completion.el
:properties:
:header-args: :tangle core/me-completion.el
:end:
=me-completion.el= 补全相关包
*** me-completion.el 文件头
#+begin_src emacs-lisp
;;; completion.el --- Completion packages -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** me-completion.el pacakge [[https://github.com/minad/cape/][cape]]  完成后端
#+begin_src emacs-lisp
(use-package cape
  :straight t
  :after minemacs-loaded
  :demand t
  :config
  (dolist (fn '(cape-file cape-ispell cape-symbol cape-keyword))
    (add-to-list 'completion-at-point-functions fn)))
#+end_src
*** me-completion.el package [[https://github.com/minad/corfu][corfu]] 完成前端
#+begin_src emacs-lisp
(use-package corfu
  :straight t
  :hook (minemacs-after-startup . global-corfu-mode)
  :init
  (add-to-list
   'load-path
   (format "%sstraight/%s/corfu/extensions" straight-base-dir straight-build-dir))
  :custom
  (corfu-auto t) ; Enable auto completion
  (corfu-cycle t) ; Allows cycling through candidates
  (corfu-min-width 25)
  (corfu-auto-delay 0.2)
  :config
  (with-eval-after-load 'evil
    (define-key corfu-map (kbd "C-j") #'corfu-next)
    (define-key corfu-map (kbd "C-k") #'corfu-previous))

  (defun +corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer if `completion-at-point' is bound."
    (when (where-is-internal #'completion-at-point (list (current-local-map)))
      (setq-local corfu-auto nil) ; Enable/disable auto completion
      (corfu-mode 1)))

  (add-hook 'minibuffer-setup-hook #'+corfu-enable-in-minibuffer))
#+end_src
*** me-completion.el package [[https://elpa.gnu.org/packages/corfu.html][corfu extensions]]
#+begin_src emacs-lisp
 (use-package corfu-popupinfo
   :hook (corfu-mode . corfu-popupinfo-mode)
   :custom
   (corfu-popupinfo-delay 0.1)
   (corfu-popupinfo-max-height 15)
   :config
   (define-key corfu-map (kbd "M-p") #'corfu-popupinfo-scroll-down)
   (define-key corfu-map (kbd "M-n") #'corfu-popupinfo-scroll-up)
   (define-key corfu-map (kbd "M-d") #'corfu-popupinfo-toggle))

 (use-package corfu-history
   :hook (corfu-mode . corfu-history-mode)
   :config
   (unless (bound-and-true-p savehist-mode)
     (savehist-mode 1))
   (add-to-list 'savehist-additional-variables 'corfu-history))

 (use-package corfu-terminal
   :straight t
   :hook (corfu-mode . corfu-terminal-mode))
#+end_src
*** me-completion.el package [[https://github.com/jdtsmith/kind-icon][kind-icon]] 图标和完成前缀
#+begin_src emacs-lisp
(use-package kind-icon
   :straight t
   :after corfu
   :demand t
   :custom
   (kind-icon-default-style '(:padding 0
                              :stroke 0
                              :margin 0
                              :radius 0
                              :height 0.8
                              :scale 1.05)) ; Fix the scaling/height
   (kind-icon-use-icons (+emacs-features-p 'rsvg)) ; Use icons only in Emacs built with SVG support
   (kind-icon-default-face 'corfu-default) ; Have background color be the same as `corfu' face          background
   (kind-icon-blend-background nil) ; Use midpoint color between foreground and background colors       ("blended")?
   :config
   (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
*** me-completion.el package [[https://github.com/minad/consult][consult]] 搜索和导航
#+begin_src emacs-lisp
(use-package consult
  :straight t
  :hook (embark-collect-mode . consult-preview-at-point-mode)
  :custom
  ;; Use `consult-xref' for `xref-find-references'
  (xref-show-xrefs-function #'consult-xref)
  ;; Better formatting for `view-register'
  (register-preview-function #'consult-register-format)
  :init
  (define-key minibuffer-local-map (kbd "C-r") #'consult-history)
  (define-key minibuffer-local-map (kbd "S-C-v") #'consult-yank-pop)
  (global-set-key (kbd "C-s") #'consult-line)
  (+map!
    ;; buffer
    "bl"  #'consult-line
    "bb"  #'consult-buffer
    "bB"  #'consult-buffer-other-window
    "bF"  #'consult-buffer-other-frame
    "bmM" #'consult-bookmark
    "bi"  #'consult-imenu
    "bO"  #'consult-outline
    ;; file
    "fr"  #'consult-recent-file
    ;; git/vc
    "gG"  #'consult-git-grep
    ;; search
    "ss"  #'consult-ripgrep
    "sg"  #'consult-grep
    "sf"  #'consult-find
    "sM"  #'consult-man
    "st"  #'consult-locate
    "sh"  #'consult-history
    "sa"  #'consult-org-agenda
    ;; project
    "pl"  #'consult-line-multi
    "pi"  #'consult-imenu-multi
    ;; code
    "cm"  #'consult-flymake
    "cE"  #'consult-compile-error
    ;; unclassified
    "xc"  #'consult-complex-command
    ;; insert
    "iy"  #'consult-yank-from-kill-ring
    "ir"  '(nil :wk "register")
    "irr" #'consult-register
    "irl" #'consult-register-load
    "irs" #'consult-register-store
    ;; help
    "hu"  #'consult-theme
    "hI"  #'consult-info)
  (+map-local! :keymaps 'org-mode-map
    "h"   #'consult-org-heading)
  :config
  (setq-default completion-in-region-function #'consult-completion-in-region)

  ;; TWEAK: Fill the `initial' query of `consult' commands from
  ;; `thing-at-point'.
  ;; NOTE: Some `consult' commands have slightly different signature, the
  ;; `initial' argument can come first in some cases (like `consult-line') or
  ;; second in some other cases (like `condult-grep'). These two advices are
  ;; added to such family of commands so it is filled in the right place.
  (dolist (cmd '(consult-line ; `initial' comes first in these commands
                 consult-man))
    (advice-add
     cmd :around
     (defun +consult--dwim-first-arg-a (orig-fn &optional initial opt)
       (apply orig-fn
              (append
               (if (and (called-interactively-p) (not (minibufferp)))
                   (list (or initial (+region-or-thing-at-point)))
                 (list initial))
               (when opt (list opt)))))))

  (dolist (cmd '(consult-ripgrep ; `initial' comes second in these commands
                 consult-line-multi
                 consult-grep
                 consult-find))
    (advice-add
     cmd :around
     (defun +consult--dwim-second-arg-a (orig-fn &optional dir initial)
       (apply orig-fn
              (append
               (list dir)
               (if (and (called-interactively-p) (not (minibufferp)))
                   (list (or initial (+region-or-thing-at-point)))
                 (list initial))))))))
#+end_src
*** me-completion.el package [[https://github.com/oantolin/embark][embark]] TODO:
#+begin_src emacs-lisp
(use-package embark
  :straight t
  :init
  (global-set-key [remap describe-bindings] #'embark-bindings)
  (setq prefix-help-command #'embark-prefix-help-command)
  (+map! "." #'embark-act))

(use-package embark-consult
  :straight t
  :after embark consult
  :demand t)
#+end_src
*** me-completion.el package [[https://github.com/minad/marginalia][marginalia]] 旁注
#+begin_src emacs-lisp
(use-package marginalia
  :straight t
  :hook (minemacs-after-startup . marginalia-mode))

(use-package all-the-icons-completion
  :straight t
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))
#+end_src
*** me-completion.el package [[https://github.com/oantolin/orderless][orderless]] 正则匹配
#+begin_src emacs-lisp
(use-package orderless
  :straight t
  :after minemacs-loaded
  :demand t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
*** me-completion.el package [[https://github.com/minad/vertico][vertico]] 完成UI
#+begin_src emacs-lisp
(use-package vertico
  :straight t
  :hook (minemacs-after-startup . vertico-mode)
  :custom
  (vertico-cycle t)
  (vertico-resize nil)
  (vertico-count 12)
  :init
  (add-to-list
   'load-path (concat
               straight-base-dir
               (format "straight/%s/vertico/extensions" straight-build-dir)))
  ;; In the minibuffer, "C-k" is be mapped to act like "<up>". However, in
  ;; Emacs, "C-k" have a special meaning of `kill-line'. So lets map "C-S-k"
  ;; to serve the original "C-k".
  (define-key minibuffer-local-map (kbd "C-S-k") #'kill-line)
  :config
  (with-eval-after-load 'evil
    (define-key vertico-map (kbd "C-j") #'vertico-next)
    (define-key vertico-map (kbd "C-k") #'vertico-previous)))

(use-package vertico-directory
  :after vertico
  :demand t
  :config
  (define-key vertico-map "\r" #'vertico-directory-enter)
  (define-key vertico-map "\d" #'vertico-directory-delete-char)
  (define-key vertico-map "\M-\d" #'vertico-directory-delete-word)
  (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)

  (with-eval-after-load 'evil
    (define-key vertico-map (kbd "M-h") #'vertico-directory-up)))

(use-package vertico-repeat
  :hook (minibuffer-setup . vertico-repeat-save)
  :init
  (keymap-global-set "M-R" #'vertico-repeat))
#+end_src
*** me-completion.el 文件尾
#+begin_src emacs-lisp
(provide 'me-completion)
;;; me-completion ends here
#+end_src
** me-core-ui.el
:properties:
:header-args: :tangle core/me-core-ui.el
:end:
=me-core-ui.el= 界面相关包
*** me-core-ui.el 文件头
#+begin_src emacs-lisp
;;; me-core-ui.el --- MinEmacs -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** me-core-ui.el 调整行号大小
#+begin_src emacs-lisp
 (defun +theme--tweaks-h (&optional _)
   "Use smaller font (75% of the default) for line numbers in graphic mode."
   (when (display-graphic-p)
     (set-face-attribute
      'line-number nil
      :background (face-attribute 'default :background)
      :height (truncate (* 0.75 (face-attribute 'default :height)))
      :weight 'semi-light)
     (set-face-attribute
      'line-number-current-line nil
      :height (truncate (* 0.75 (face-attribute 'default :height)))
      :weight 'bold)))

 ;; Apply tweaks
 (add-hook 'after-init-hook #'+theme--tweaks-h)
 (add-hook 'enable-theme-functions #'+theme--tweaks-h)

 ;; Save enabled theme
 (add-hook
  'enable-theme-functions
  (defun +theme--save-enabled-theme-h (theme)
    "Save the enabled theme to `minemacs-theme'.
 Useful for keeping track of the enabled theme."
    (setq minemacs-theme theme)))
#+end_src
*** me-core-ui.el 主题相关
#+begin_src emacs-lisp
;; Disable previously enabled custom themes before enabling a new one.
(advice-add
 'load-theme :before
 (defun +theme--disable-previous-themes-a (&rest _)
   "Disable previously enabled themes before enabling the new one."
   (mapc #'disable-theme custom-enabled-themes)))

(use-package modus-themes
  :straight (:host github :repo "protesilaos/modus-themes")
  :config
  ;; In all of the following, WEIGHT is a symbol such as `semibold',
  ;; `light', `bold', or anything mentioned in `modus-themes-weights'.
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs t
        modus-themes-mixed-fonts nil
        modus-themes-variable-pitch-ui nil
        modus-themes-custom-auto-reload t

        ;; Options for `modus-themes-prompts' are either nil (the
        ;; default), or a list of properties that may include any of those
        ;; symbols: `italic', `WEIGHT'
        modus-themes-prompts '(semi-bold)

        ;; The `modus-themes-completions' is an alist that reads two
        ;; keys: `matches', `selection'.  Each accepts a nil value (or
        ;; empty list) or a list of properties that can include any of
        ;; the following (for WEIGHT read further below):
        ;; `matches'   :: `underline', `italic', `WEIGHT'
        ;; `selection' :: `underline', `italic', `WEIGHT'
        modus-themes-completions
        '((matches   . (extrabold))
          (selection . (semibold text-also)))

        modus-themes-org-blocks 'gray-background ; {nil,'gray-background,'tinted-background}

        ;; The `modus-themes-headings' is an alist: read the manual's
        ;; node about it or its doc string.  Basically, it supports
        ;; per-level configurations for the optional use of
        ;; `variable-pitch' typography, a height value as a multiple of
        ;; the base font size (e.g. 1.5), and a `WEIGHT'.
        modus-themes-headings
        '((1                . (1.4))
          (2                . (1.3))
          (3                . (1.2))
          (agenda-date      . (1.2))
          (agenda-structure . (light 1.5))
          (t                . (1.1)))

        modus-themes-common-palette-overrides
        `(;; Customize the mode-line colors
          (bg-mode-line-active bg-blue-intense)
          (fg-mode-line-active fg-main)

          ;; From the section "Make the mode line borderless"
          (border-mode-line-active unspecified)
          (border-mode-line-inactive unspecified)

          ;; From the section "Make matching parenthesis more or less intense"
          (bg-paren-match bg-blue-intense)
          (underline-paren-match unspecified)

          ;; Links
          (underline-link border)
          (underline-link-visited border)
          (underline-link-symbolic border)

          ;; Comments are yellow, strings are green
          (comment yellow-cooler)
          (string green-warmer)

          ;; And expand the preset here. Note that the ,@ works because we use
          ;; the backtick for this list, instead of a straight quote.
          ,@modus-themes-preset-overrides-faint))

  ;; Load the theme of your choice.
  (load-theme 'modus-operandi-tinted t))

(use-package all-the-icons
  :straight t
  :config
  ;; Show .m files as matlab/octave files
  (setcdr (assoc "m" all-the-icons-extension-icon-alist)
          (cdr (assoc "matlab" all-the-icons-extension-icon-alist))))

(use-package doom-themes
  :straight t)

(use-package apropospriate-theme
  :straight t)
#+end_src
*** me-core-ui.el [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]]
#+begin_src emacs-lisp
(use-package dashboard
  :straight t
  :after evil evil-collection
  :demand t
  :init
  (+map! "oD" #'dashboard-open)
  :custom
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-center-content t)
  (dashboard-banner-ascii "MinEmacs")
  (dashboard-banner-logo-title "Welcome to MinEmacs!")
  (dashboard-items '((recents . 5) (projects . 5) (bookmarks . 5)))
  (dashboard-image-banner-max-width 600)
  (dashboard-projects-backend 'project-el)
  (dashboard-startup-banner (concat minemacs-assets-dir "images/minemacs.png"))
  :config
  ;; Ensure setting the keybindings before openning the dashboard
  (evil-collection-dashboard-setup)

  ;; Avoid openning the dashboard when Emacs starts with an open file.
  (when (zerop (length (seq-filter #'identity (mapcar #'buffer-file-name (buffer-list)))))
    (dashboard-open)))
#+end_src
*** me-core-ui.el doom-modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :straight t
  :hook (minemacs-after-startup . doom-modeline-mode)
  :custom
  (doom-modeline-height 35)
  (doom-modeline-bar-width 8)
  (doom-modeline-time-icon nil)
  (doom-modeline-buffer-encoding 'nondefault)
  (doom-modeline-unicode-fallback t)
  :config
  ;; HACK: Add some padding to the right
  (doom-modeline-def-modeline 'main
    '(bar workspace-name window-number modals matches follow buffer-info
      remote-host buffer-position word-count parrot selection-info)
    '(compilation objed-state misc-info persp-name battery grip irc mu4e gnus
      github debug repl lsp minor-modes input-method indent-info buffer-encoding
      major-mode process vcs checker time "  ")))
#+end_src
*** me-core-ui.el 文件尾
#+begin_src emacs-lisp
(provide 'me-core-ui)
;;; me-core-ui ends here
#+end_src
** me-evil.el
:properties:
:header-args: :tangle core/me-evil.el
:end:
=me-evil.el= Emacs as Vim
*** me-evil.el 文件头
#+begin_src emacs-lisp
;;; me-evil.el --- Emacs as Vim! -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** me-evil.el pacakge =evil=
#+begin_src emacs-lisp
(use-package evil
  :straight t
  :hook (minemacs-after-startup . evil-mode)
  :preface
  (setq evil-want-keybinding nil)
  :custom
  (evil-want-C-i-jump nil)
  (evil-want-fine-undo t)
  (evil-want-Y-yank-to-eol t)
  (evil-split-window-below t)
  (evil-vsplit-window-right t)
  (evil-kill-on-visual-paste nil)
  (evil-respect-visual-line-mode t)
  (evil-ex-interactive-search-highlight 'selected-window)
  :config
  (+map!
    ;; buffer
    "bN" '(evil-buffer-new :wk "New buffer")
    ;; window
    "ww" '(evil-window-next :wk "Next")
    "wW" '(evil-window-prev :wk "Previous")
    "ws" '(evil-window-split :wk "Split")
    "wv" '(evil-window-vsplit :wk "Vertical split")
    "wr" '(evil-window-rotate-downwards :wk "Rotate downwards")
    "wR" '(evil-window-rotate-upwards :wk "Rotate upwards")
    "w+" '(evil-window-increase-width :wk "Increase width")
    "w-" '(evil-window-decrease-width :wk "Decrease width"))

  ;; Use `evil-search' instead of `isearch'
  (evil-select-search-module 'evil-search-module 'evil-search)

  ;; Ask for a buffer when splitting windows
  (with-eval-after-load 'consult
    (dolist (fn '(evil-window-split evil-window-vsplit))
      (advice-add
       fn :after
       (defun +evil--cunsult-buffer-after-window-split-a (&rest _)
         (consult-buffer))))))
#+end_src
*** me-evil.el pacakge =evil-collection=
#+begin_src emacs-lisp
(use-package evil-collection
  :straight t
  :after evil minemacs-loaded
  :demand t
  :config
  (evil-collection-init
   (seq-filter
    (lambda (mode)
      (not (memq mode '(evil-mc ; Default bindings for `evil-mc' are messy
                        mu4e ; TEMP: until `evil-collection-mu4e' gets fixed, see github.com/emacs-evil/evil-collection/issues/695
                        elisp-mode)))) ; I don't like "gz" for `ielm', I like "gr" though
    evil-collection-mode-list))

  ;; Use "gr" to find references for elisp mode
  (with-eval-after-load 'elisp-mode
    (when evil-collection-want-find-usages-bindings
      (evil-collection-define-key 'normal 'emacs-lisp-mode-map
        "gr" 'xref-find-references)))

  ;; TEMP: Fix `mu4e' evil integraion
  (with-eval-after-load 'mu4e
    (require 'loadhist) ; to use `feature-file'

    ;; To avoid calling `evil-collection-mu4e--main-action-str'
    (defvar evil-collection-mu4e-new-region-basic nil)

    (require 'evil-collection-mu4e
             (concat (file-name-directory (feature-file 'evil-collection))
                     "modes/mu4e/evil-collection-mu4e.el"))

    (evil-collection-mu4e-set-state)
    (evil-collection-mu4e-set-bindings)

    ;; Fix some missed up bindings
    (defalias 'mu4e~view-quit-buffer #'mu4e-view-quit)

    (add-hook 'org-mode-hook #'evil-collection-mu4e-org-set-header-to-normal-mode)
    (add-hook 'mu4e-compose-pre-hook #'evil-collection-mu4e-org-set-header-to-insert-mode)))
#+end_src
*** me-evil.el pacakge =evil-snipe=
#+begin_src emacs-lisp
(use-package evil-snipe
  :straight t
  :hook (minemacs-after-startup . evil-snipe-mode)
  :hook (minemacs-after-startup . evil-snipe-override-mode)
  :custom
  (evil-snipe-scope 'buffer)
  (evil-snipe-smart-case t)
  (evil-snipe-auto-scroll t))
#+end_src
*** me-evil.el package =evil-numbers=
#+begin_src emacs-lisp
 (use-package evil-numbers
   :straight t
   :init
   (+nmap!
     "g+" #'evil-numbers/inc-at-pt
     "g=" #'evil-numbers/inc-at-pt
     "g-" #'evil-numbers/dec-at-pt)
   (+vmap!
     "g+" #'evil-numbers/inc-at-pt-incremental
     "g=" #'evil-numbers/inc-at-pt-incremental
     "g-" #'evil-numbers/dec-at-pt-incremental))
#+end_src
*** me-evil.el package =evil-nerd-commenter=
#+begin_src emacs-lisp
 (use-package evil-nerd-commenter
   :straight t
   :commands evilnc-comment-operator
   :init
   (+nvmap! "gc" #'evilnc-comment-operator))
#+end_src
*** me-evil.el pacakge =evil-escape=
#+begin_src emacs-lisp
 (use-package evil-escape
   :straight t
   :hook (evil-mode . evil-escape-mode)
   :custom
   ;; The default "fd" interfere with the "f" (bound to `evil-snipe-f') binding.
   (evil-escape-key-sequence "kj")
   (evil-escape-unordered-key-sequence t)) ; "kj" or "jk"
#+end_src
*** me-evil.el 文件尾
#+begin_src emacs-lisp
(provide me-evil)
;;; me-evil ends here
#+end_src
