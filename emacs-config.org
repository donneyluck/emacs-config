#+title: Emacs 配置文件
#+author: donney.luck
#+date: 2023/04/15 14:23:50
#+startup: overview
#+property: header-args:emacs-lisp :comments link :mkdirp yes
* early-init.el
:properties:
:HEADER-ARGS: :tangle early-init.el
:end:
=early-init.el= 在Emacs刚启动，还未加载主要配置文件时的配置文件。
#+begin_src emacs-lisp
;;; early-init.el --- MinEmacs early initialization tweaks -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:

(setq
 ;; Do not make installed packages available when Emacs starts
 package-enable-at-startup nil
 ;; HACK: Increase the garbage collection (GC) threshold for faster startup.
 ;; This will be overwritten when `gcmh-mode' (a.k.a. the Garbage Collector
 ;; Magic Hack) gets loaded in the `me-gc' module (see "init.el").
 gc-cons-threshold most-positive-fixnum
 ;; Do not wast time checking the modification time of each file
 load-prefer-newer noninteractive
 ;; Remove some unneeded UI elements
 default-frame-alist '((tool-bar-lines . 0)
                       (menu-bar-lines . 0)
                       (vertical-scroll-bars)
                       (mouse-color . "blue")
                       (left-fringe . 8)
                       (right-fringe . 13)
                       (fullscreen . maximized))
 ;; Explicitly set modes disabled in `default-frame-alist' to nil
 tool-bar-mode nil
 menu-bar-mode nil
 scroll-bar-mode nil)

;; NOTE: In Emacs29+, frames can have a transparent background via the
;; `alpha-background' parameter. For a better experience, this value should be
;; set early before any frame gets created (i.e. in "early-init.el"). MinEmacs
;; uses the "$MINEMACS_ALPHA" environment variable that can be set to an integer
;; value in the [1-100] range (the alpha percentage). When this variable is not
;; set, Emacs will load the default GUI (without background alpha), and when it
;; is set but the value is not valid, MinEmacs will fallback to the default
;; alpha of 93%.
(when (>= emacs-major-version 29)
  (when-let* ((alpha (getenv "MINEMACS_ALPHA"))
              (alpha (string-to-number alpha)))
    (push (cons 'alpha-background (if (or (zerop alpha) (> alpha 100)) 93 alpha))
          default-frame-alist)))

;; HACK: In `lsp-mode' (see the `me-lsp' module), the user can define the
;; "$LSP_USE_PLISTS=true" to improve `lsp-mode' performances. We set this
;; environment variable here so we don't need to add it to the system's
;; environment variables.
(setenv "LSP_USE_PLISTS" "true")

;; Load MinEmacs variables from the `me-vars' core module.
(load (expand-file-name "core/me-vars.el" (file-name-directory (file-truename load-file-name))) nil t)

;; Load the user early configuration file from "$MINEMACSDIR/early-config.el"
;; if it exists.
(let ((early-config-path (concat minemacs-config-dir "early-config.el")))
  (when (file-exists-p early-config-path)
    (load early-config-path nil (not minemacs-verbose))))

;;; early-init.el ends here
#+end_src
* init.el
:properties:
:HEADER-ARGS: :tangle init.el
:end:
=init.el= 是Emacs的主要配置文件。
** init.el 文件头
#+begin_src emacs-lisp
;; init.el --- MinEmacs core initialization file -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:

#+end_src
** init.el 版本检测
#+begin_src emacs-lisp
;; Check if Emacs version is supported. You can define the
;; $MINEMACS_IGNORE_VERSION_CHECK environment variable to ignore this check.
;; This can be useful if you are stuck with an old Emacs version and you've
;; incrementally implemented the new Emacs routines MinEmacs needs in your
;; "init-tweaks.el".
(let ((min-ver "28.0"))
  (when (and (version< emacs-version min-ver) (not (getenv "MINEMACS_IGNORE_VERSION_CHECK")))
    (error "Emacs v%s is not supported, MinEmacs requires v%s or higher" emacs-version min-ver)))

#+end_src
** init.el 提高启动速度
#+begin_src emacs-lisp
;; PERF: Setting `file-name-handler-alist' to nil should boost startup time.
;; reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start
;; Store the current value so we can reset it after Emacs startup.
(put 'file-name-handler-alist 'original-value (default-toplevel-value 'file-name-handler-alist))
;; Make sure the new value survives any current let-binding.
(set-default-toplevel-value 'file-name-handler-alist nil)
;; After Emacs startup, we restore `file-name-handler-alist' while conserving
;; the potential edits made during startup.
(add-hook
 'emacs-startup-hook
 (defun +mineamcs--restore-file-name-handler-alist-h ()
   (setq file-name-handler-alist
         (delete-dups
          (append file-name-handler-alist
                  (get 'file-name-handler-alist 'original-value)))))
 101)

#+end_src
** init.el 载入定义的vars
#+begin_src emacs-lisp
;; HACK: At this point, MinEmacs variables defined in `me-vars' should be
;; already loaded (in "early-init.el"). However, we double-check here and load
;; them if necessary in case Emacs has been loaded directly from "init.el"
;; without passing by "early-init.el". This can happen when we are running in a
;; `me-org-export-async-init' context, or if we use some bootstrapping mechanism
;; like Chemacs2.
(unless (featurep 'me-vars)
  (load (expand-file-name "core/me-vars.el" (file-name-directory (file-truename load-file-name))) nil t))

(defun +load (&rest filename-parts)
  "Load a file, the FILENAME-PARTS are concatenated to form the file name."
  (let ((filename (mapconcat #'identity filename-parts nil)))
    (if (file-exists-p filename)
        (load filename nil (not minemacs-verbose))
      (user-error "[MinEmacs:Error] Cannot load \"%s\", the file doesn't exists." filename))))

;; HACK: Most core and third-party packages depends on the
;; `user-emacs-directory' variable to store some cache information and generated
;; configuration files. However, this will mess with MinEmacs' directory (which
;; defaults to `user-emacs-directory'). To keep the "~/.emacs.d/" directory
;; clean, we overwrite the `user-emacs-directory' with `minemacs-local-dir' so
;; all generated files gets stored in "~/.emacs.d/local/".
;; BUG: It is important to set this here and not in `me-vars' nor in
;; "early-init.el", otherwise, it won't work with Chemacs2-based installations.
(setq user-emacs-directory minemacs-local-dir)
#+end_src
** init.el 向后兼容一些函数(>=emacs29)
#+begin_src emacs-lisp
;; HACK: Load Emacs 29 back ports for earlier Emacs versions. Note that I do
;; only back port a very small number of the functions/variables that I use at
;; early stage from Emacs29+ to be compatible with Emacs 28.2. For any Emacs
;; version less than 29, MinEmacs will enable the `me-compat' module and load it
;; just after `me-bootstrap'. This module loads the `compat' package which
;; provide several forward compatibility functions, it is loaded at an early
;; stage to provide its functionality to the rest of the modules so we can use
;; some new features when configuring them.
(when (< emacs-major-version 29)
  (+load minemacs-modules-dir "me-backports-29.el"))

#+end_src
** init.el =debug-on-error=
#+begin_src emacs-lisp
(setq
 ;; Enable debugging on error when Emacs is launched with the "--debug-init"
 ;; option or when the environment variable "$MINEMACS_DEBUG" is defined (see
 ;; `me-vars').
 debug-on-error minemacs-debug
 ;; Decrese the warning type to `:error', unless we are running in verbose mode
 warning-minimum-level (if minemacs-verbose :warning :error)
 warning-minimum-log-level warning-minimum-level
 ;; Make byte compilation less noisy
 byte-compile-warnings minemacs-verbose
 byte-compile-verbose minemacs-verbose)

#+end_src
** init.el =native-compile=
#+begin_src emacs-lisp
;; Native compilation settings
(when (featurep 'native-compile)
  (setq
   ;; Silence compiler warnings as they can be pretty disruptive, unless we are
   ;; running in `minemacs-verbose' mode.
   native-comp-async-report-warnings-errors (when minemacs-verbose 'silent)
   native-comp-verbose (if minemacs-verbose 1 0) ; do not be too verbose
   native-comp-debug (if minemacs-debug 1 0)
   ;; Make native compilation happens asynchronously.
   native-comp-jit-compilation t)

  ;; Set the right directory to store the native compilation cache to avoid
  ;; messing with "~/.emacs.d/".
  (startup-redirect-eln-cache (concat minemacs-cache-dir "eln/")))

#+end_src
** init.el =loaddefs-generate=
#+begin_src emacs-lisp
;; Add some of MinEmacs' directories to `load-path'.
(setq load-path (append (list minemacs-core-dir minemacs-elisp-dir minemacs-extras-dir) load-path))

(defun minemacs-generate-loaddefs ()
  "Generate MinEmacs' loaddefs file."
  (interactive)
  (when (file-exists-p minemacs-loaddefs-file)
    (delete-file minemacs-loaddefs-file))

  (loaddefs-generate
   (list minemacs-core-dir minemacs-elisp-dir minemacs-extras-dir)
   minemacs-loaddefs-file))

;; Some of MinEmacs commands and libraries are defined to be auto-loaded. In
;; particular, these in the `minemacs-core-dir', `minemacs-elisp-dir', and
;; `minemacs-extras-dir' directories. The generated loaddefs file will be stored
;; in `minemacs-loaddefs-file'. We first regenerate the loaddefs file if it
;; doesn't exist.
(unless (file-exists-p minemacs-loaddefs-file)
  (minemacs-generate-loaddefs))

;; Then we load the loaddefs file
(+load minemacs-loaddefs-file)

#+end_src
** init.el load init-tweak.el
#+begin_src emacs-lisp
;; Load user init tweaks from "$MINEMACSDIR/init-tweaks.el" when available
;; (let ((user-init-tweaks (concat minemacs-config-dir "init-tweaks.el")))
;;   (when (file-exists-p user-init-tweaks)
;;     (+load user-init-tweaks)))

#+end_src
** init.el load environment vars
#+begin_src emacs-lisp
;; HACK: When Emacs is launched from the terminal (in GNU/Linux), it inherits
;; the terminal's environment variables, which can be useful specially for
;; running commands under a custom "$PATH" directory. But when Emacs is launched
;; from the desktop manager (KDE, Gnome, etc.), it can omit the terminal's
;; environment variables. The way I solve this is by launching Emacs from
;; terminal, which gives Emacs the full environment variables of the invoking
;; terminal. Then I call the `+env-save' command, which reads the environment
;; variables defined in `+env-save-vars' and stores them in
;; "~/.emacs.d/local/system-env.el". This file is then loaded in the future
;; Emacs sessions (launched either from terminal or from GUI) by calling the
;; `+env-load' command.
(+env-load) ; Load environment variables when available.

#+end_src
** init.el load =packages= and =user =customization=
#+begin_src emacs-lisp
;; NOTE: This is MinEmacs' synchronization point. To get a fast Emacs startup,
;; MinEmacs tries to defer loading most of its packages until this hook is
;; executed. This is managed by the `minemacs-loaded' and `minemacs-lazy'
;; pseudo-modules. After loading Emacs, the `emacs-startup-hook' gets executed,
;; we use this hook to profile the startup time, load the fonts and the theme,
;; and setup the *scratch* buffer content. Lastly we require the
;; `minemacs-loaded' synchronization module, which runs internally the
;; `minemacs-after-startup-hook' hooks and provide `minemacs-loaded' so the
;; packages loaded with `:after minemacs-loaded' can be loaded. The
;; `minemacs-loaded' will require `minemacs-lazy' when Emacs goes idle, this
;; pseudo-module provides `minemacs-lazy' so the packages loaded with `:after
;; minemacs-lazy' can be loaded then it incrementally run the hooks in
;; `minemacs-lazy-hook' when Emacs goes idle.
(defun +minemacs--loaded-h ()
  (+log! "=============== Loaded Emacs ===============")
  (+info! "Loaded Emacs in %s." (emacs-init-time))

  ;; When running in an async Org export context, there is no need to set
  ;; the fonts, load the theme or play with the scratch buffer.
  (unless (featurep 'me-org-export-async-init)
    (+log! "Applying `minemacs-fonts'.")
    ;; Load fonts, values are read from `minemacs-fonts' if set in config.el,
    ;; otherwise, they are read from the default `minemacs-default-fonts'.
    (+set-fonts)

    ;; Initially MinEmacs loads the `doom-one-light' theme, and when
    ;; `minemacs-theme' is set in user configuration, it is loaded here.
    (+load-theme)

    (+log! "Filling scratch buffer content.")
    (+fill-scratch-buffer)

    ;; In `me-defaults', the `initial-major-mode' is set to `fundamental-mode'
    ;; to enhance startup time. However, I like to use the scratch buffer to
    ;; evaluate Elisp code, so we switch to Elisp mode in the scratch buffer
    ;; when Emacs is idle for 10 seconds.
    (+eval-when-idle-for! 10.0
      (setq initial-major-mode 'emacs-lisp-mode)
      (with-current-buffer (get-scratch-buffer-create)
        (emacs-lisp-mode))))

  ;; Require the virtual package to triggre loading packages depending on it
  (require 'minemacs-loaded))

;; Add it to the very begining of `emacs-startup-hook'
(add-hook 'emacs-startup-hook #'+minemacs--loaded-h -101)

;; ========= Load MinEmacs packages and user customization =========
;; When running in an async Org export context, the used modules are set in
;; modules/extras/me-org-export-async-init.el, so we must not overrite them with
;; the user's enabled modules.
(if (featurep 'me-org-export-async-init)
    (progn (message "Loading \"init.el\" in an org-export-async context.")
           (setq minemacs-not-lazy t)
           (require 'minemacs-loaded))
  ;; Load the default list of enabled modules (`minemacs-modules' and `minemacs-core-modules')
  (+load minemacs-core-dir "me-modules.el")

  ;; The modules.el file can override minemacs-modules and minemacs-core-modules
  (let ((user-conf-modules (concat minemacs-config-dir "modules.el")))
    (when (file-exists-p user-conf-modules)
      (+load user-conf-modules))))

;; Load fonts early (they are read from the default `minemacs-default-fonts').
(+set-fonts)

;; NOTE: Ensure the `me-gc' module is in the core modules list. This module
;; enables the `gcmh-mode' package (a.k.a. the Garbage Collector Magic Hack).
;; This GCMH minimizes GC interference with the activity by using a high GC
;; threshold during normal use, then when Emacs is idling, GC is triggered and a
;; low threshold is set. In MinEmacs, we set the threshold (`gc-cons-threshold'
;; variable) to an unlimited size in "early-init.el", this helps improving the
;; startup time, but needs to be set down to a more reasonable value after Emacs
;; gets loaded. The use of `gcmh-mode' ensures reverting this value so we don't
;; need to do it manually.
;; NOTE: Ensure the `me-defaults', `me-splash', `me-bootstrap' and `me-compat'
;; modules are in the right order. The `me-compat' should be loaded just after
;; `me-bootstrap' once `straight' and `use-package' are set up. This enables us
;; to use some of the new Emacs 29 functions even on earlier Emacs versions,
;; this can be useful when configuring the module's packages and adding new
;; functionality.
(setq minemacs-core-modules
      (delete-dups
       (append
        '(me-defaults)
        (when (memq 'me-splash minemacs-core-modules) '(me-splash))
        '(me-bootstrap)
        (when (< emacs-major-version 29) '(me-compat))
        '(me-builtin me-gc)
        minemacs-core-modules)))

;; Load MinEmacs modules
(dolist (module-file (append
                      (mapcar (apply-partially #'format "%s%s.el" minemacs-core-dir) minemacs-core-modules)
                      (mapcar (apply-partially #'format "%s%s.el" minemacs-modules-dir) minemacs-modules)))
  (+load module-file))

;; Write user custom variables to separate file instead of "init.el"
(setq custom-file (concat minemacs-config-dir "custom-vars.el"))

;; Load the custom variables file if it exists
(when (file-exists-p custom-file)
  (+load custom-file))

;; Load user configuration from "$MINEMACSDIR/config.el" when available
(let ((user-config (concat minemacs-config-dir "config.el")))
  (when (file-exists-p user-config)
    (+load user-config)))

(+lazy-when! (featurep 'native-compile)
  (+info! "Trying to clean outdated native compile cache")
  ;; Delete outdated natively compiled files when Emacs become idle
  (+shutup! (native-compile-prune-cache)))

(+log! "Loaded init.el")

#+end_src
** init.el 文件尾
#+begin_src emacs-lisp
;;; init.el ends here
#+end_src
* core
=core= 目录下是框架的核心配置
** me-bootstrap.el
:properties:
:header-args: :tangle core/me-bootstrap.el
:end:
=me-bootstrap.el= 设置包下载器和包安装器
*** me-bootstrap.el 文件头
#+begin_src emacs-lisp
;; me-bootstrap.el --- Bootstrap packages (straight & use-package) -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** me-bootstrap.el 安装 =straight= 包下载器
#+begin_src emacs-lisp
(setq
 ;; Base directory
 straight-base-dir minemacs-local-dir
 ;; Add Emacs version and the Git hash to the build directory to avoid problems
 straight-build-dir (format "build-%s%s" emacs-version
                            (if emacs-repository-version
                                (format "-%s" (substring emacs-repository-version 0 8))
                              ""))
 ;; Use the "develop" branch on straight.el's repo.
 straight-repository-branch (if (>= emacs-major-version 29) "develop" "master")
 ;; Do not slow startup by checking for package modifs, check only on demand
 straight-check-for-modifications '(check-on-save find-when-checking))

;; Bootstraping straight.el
;; See: github.com/radian-software/straight.el#bootstrapping-straightel
(defvar bootstrap-version)
(let ((bootstrap-file (concat straight-base-dir "straight/repos/straight.el/bootstrap.el"))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src
*** me-bootstarp.el 安装 =use-package= 包管理器
#+begin_src emacs-lisp
;; Configure `use-package'
(unless (require 'use-package nil t)
  (straight-use-package 'use-package))

;; Add the `:pin-ref' extension to `use-package'
(require 'me-use-package-pin-ref)

(setq
 ;; Set `use-package' to verbose when MinEmacs is started in verbose mode
 use-package-verbose minemacs-verbose
 ;; Defer loading packages by default, use `:demand' to force loading a package
 use-package-always-defer t)
#+end_src
*** me-bootstarp.el 文件尾
#+begin_src emacs-lisp
(provide 'me-bootstrap)
;;; me-bootstrap.el ends here
#+end_src
** me-buildin.el
:properties:
:header-args: :tangle core/me-buildin.el
:end:
=me-buildin.el= 管理一些内置包
*** me-buildin.el 文件头
#+begin_src emacs-lisp
;;; me-builtin.el --- Customization of some of Emacs' builtin libraries -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** me-buildin.el buildin libraries
#+begin_src emacs-lisp
(use-package transient
  :straight (:type built-in)
  :config
  ;; Map ESC and q to quit transient
  (define-key transient-map [escape]  #'transient-quit-one)
  (define-key transient-map (kbd "q") #'transient-quit-one))

(use-package map
  :straight (:type built-in))

(use-package let-alist
  :straight (:type built-in))

#+end_src
*** me-buildin.el 文件尾
#+begin_src emacs-lisp
(provide 'me-buildin)
;;; me-buildin ends here
#+end_src
** me-compat.el
:properties:
:header-args: :tangle core/me-compat.el
:end:
=me-compat.el= 向前兼容的能力
*** me-compat.el 文件头
#+begin_src emacs-lisp
;;; me-compat.el --- Emacs forward compatibility layer -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** me-compat.el package [[https://github.com/emacs-compat/compat][compat]]
#+begin_src emacs-lisp
(use-package compat
  :straight t
  :demand t)
#+end_src
*** me-compat.el 文件尾
#+begin_src emacs-lisp
(provide 'me-compat)
;;; me-compat ends here
#+end_src
** me-completion.el
:properties:
:header-args: :tangle core/me-completion.el
:end:
=me-completion.el= 补全相关包
*** me-completion.el 文件头
#+begin_src emacs-lisp
;;; completion.el --- Completion packages -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** me-completion.el pacakge [[https://github.com/minad/cape/][cape]]  完成后端
#+begin_src emacs-lisp
(use-package cape
  :straight t
  :after minemacs-loaded
  :demand t
  :config
  (dolist (fn '(cape-file cape-ispell cape-symbol cape-keyword))
    (add-to-list 'completion-at-point-functions fn)))
#+end_src
*** me-completion.el package [[https://github.com/minad/corfu][corfu]] 完成前端
#+begin_src emacs-lisp
(use-package corfu
  :straight t
  :hook (minemacs-after-startup . global-corfu-mode)
  :init
  (add-to-list
   'load-path
   (format "%sstraight/%s/corfu/extensions" straight-base-dir straight-build-dir))
  :custom
  (corfu-auto t) ; Enable auto completion
  (corfu-cycle t) ; Allows cycling through candidates
  (corfu-min-width 25)
  (corfu-auto-delay 0.2)
  :config
  (with-eval-after-load 'evil
    (define-key corfu-map (kbd "C-j") #'corfu-next)
    (define-key corfu-map (kbd "C-k") #'corfu-previous))

  (defun +corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer if `completion-at-point' is bound."
    (when (where-is-internal #'completion-at-point (list (current-local-map)))
      (setq-local corfu-auto nil) ; Enable/disable auto completion
      (corfu-mode 1)))

  (add-hook 'minibuffer-setup-hook #'+corfu-enable-in-minibuffer))
#+end_src
*** me-completion.el package [[https://elpa.gnu.org/packages/corfu.html][corfu extensions]]
#+begin_src emacs-lisp
 (use-package corfu-popupinfo
   :hook (corfu-mode . corfu-popupinfo-mode)
   :custom
   (corfu-popupinfo-delay 0.1)
   (corfu-popupinfo-max-height 15)
   :config
   (define-key corfu-map (kbd "M-p") #'corfu-popupinfo-scroll-down)
   (define-key corfu-map (kbd "M-n") #'corfu-popupinfo-scroll-up)
   (define-key corfu-map (kbd "M-d") #'corfu-popupinfo-toggle))

 (use-package corfu-history
   :hook (corfu-mode . corfu-history-mode)
   :config
   (unless (bound-and-true-p savehist-mode)
     (savehist-mode 1))
   (add-to-list 'savehist-additional-variables 'corfu-history))

 (use-package corfu-terminal
   :straight t
   :hook (corfu-mode . corfu-terminal-mode))
#+end_src
*** me-completion.el package [[https://github.com/jdtsmith/kind-icon][kind-icon]] 图标和完成前缀
#+begin_src emacs-lisp
(use-package kind-icon
   :straight t
   :after corfu
   :demand t
   :custom
   (kind-icon-default-style '(:padding 0
                              :stroke 0
                              :margin 0
                              :radius 0
                              :height 0.8
                              :scale 1.05)) ; Fix the scaling/height
   (kind-icon-use-icons (+emacs-features-p 'rsvg)) ; Use icons only in Emacs built with SVG support
   (kind-icon-default-face 'corfu-default) ; Have background color be the same as `corfu' face          background
   (kind-icon-blend-background nil) ; Use midpoint color between foreground and background colors       ("blended")?
   :config
   (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src
*** me-completion.el package [[https://github.com/minad/consult][consult]] 搜索和导航
#+begin_src emacs-lisp
(use-package consult
  :straight t
  :hook (embark-collect-mode . consult-preview-at-point-mode)
  :custom
  ;; Use `consult-xref' for `xref-find-references'
  (xref-show-xrefs-function #'consult-xref)
  ;; Better formatting for `view-register'
  (register-preview-function #'consult-register-format)
  :init
  (define-key minibuffer-local-map (kbd "C-r") #'consult-history)
  (define-key minibuffer-local-map (kbd "S-C-v") #'consult-yank-pop)
  (global-set-key (kbd "C-s") #'consult-line)
  (+map!
    ;; buffer
    "bl"  #'consult-line
    "bb"  #'consult-buffer
    "bB"  #'consult-buffer-other-window
    "bF"  #'consult-buffer-other-frame
    "bmM" #'consult-bookmark
    "bi"  #'consult-imenu
    "bO"  #'consult-outline
    ;; file
    "fr"  #'consult-recent-file
    ;; git/vc
    "gG"  #'consult-git-grep
    ;; search
    "ss"  #'consult-ripgrep
    "sg"  #'consult-grep
    "sf"  #'consult-find
    "sM"  #'consult-man
    "st"  #'consult-locate
    "sh"  #'consult-history
    "sa"  #'consult-org-agenda
    ;; project
    "pl"  #'consult-line-multi
    "pi"  #'consult-imenu-multi
    ;; code
    "cm"  #'consult-flymake
    "cE"  #'consult-compile-error
    ;; unclassified
    "xc"  #'consult-complex-command
    ;; insert
    "iy"  #'consult-yank-from-kill-ring
    "ir"  '(nil :wk "register")
    "irr" #'consult-register
    "irl" #'consult-register-load
    "irs" #'consult-register-store
    ;; help
    "hu"  #'consult-theme
    "hI"  #'consult-info)
  (+map-local! :keymaps 'org-mode-map
    "h"   #'consult-org-heading)
  :config
  (setq-default completion-in-region-function #'consult-completion-in-region)

  ;; TWEAK: Fill the `initial' query of `consult' commands from
  ;; `thing-at-point'.
  ;; NOTE: Some `consult' commands have slightly different signature, the
  ;; `initial' argument can come first in some cases (like `consult-line') or
  ;; second in some other cases (like `condult-grep'). These two advices are
  ;; added to such family of commands so it is filled in the right place.
  (dolist (cmd '(consult-line ; `initial' comes first in these commands
                 consult-man))
    (advice-add
     cmd :around
     (defun +consult--dwim-first-arg-a (orig-fn &optional initial opt)
       (apply orig-fn
              (append
               (if (and (called-interactively-p) (not (minibufferp)))
                   (list (or initial (+region-or-thing-at-point)))
                 (list initial))
               (when opt (list opt)))))))

  (dolist (cmd '(consult-ripgrep ; `initial' comes second in these commands
                 consult-line-multi
                 consult-grep
                 consult-find))
    (advice-add
     cmd :around
     (defun +consult--dwim-second-arg-a (orig-fn &optional dir initial)
       (apply orig-fn
              (append
               (list dir)
               (if (and (called-interactively-p) (not (minibufferp)))
                   (list (or initial (+region-or-thing-at-point)))
                 (list initial))))))))
#+end_src
*** me-completion.el package [[https://github.com/oantolin/embark][embark]] TODO:
#+begin_src emacs-lisp
(use-package embark
  :straight t
  :init
  (global-set-key [remap describe-bindings] #'embark-bindings)
  (setq prefix-help-command #'embark-prefix-help-command)
  (+map! "." #'embark-act))

(use-package embark-consult
  :straight t
  :after embark consult
  :demand t)
#+end_src
*** me-completion.el package [[https://github.com/minad/marginalia][marginalia]] 旁注
#+begin_src emacs-lisp
(use-package marginalia
  :straight t
  :hook (minemacs-after-startup . marginalia-mode))

(use-package all-the-icons-completion
  :straight t
  :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))
#+end_src
*** me-completion.el package [[https://github.com/oantolin/orderless][orderless]] 正则匹配
#+begin_src emacs-lisp
(use-package orderless
  :straight t
  :after minemacs-loaded
  :demand t
  :custom
  (completion-styles '(orderless basic))
  (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src
*** me-completion.el package [[https://github.com/minad/vertico][vertico]] 完成UI
#+begin_src emacs-lisp
(use-package vertico
  :straight t
  :hook (minemacs-after-startup . vertico-mode)
  :custom
  (vertico-cycle t)
  (vertico-resize nil)
  (vertico-count 12)
  :init
  (add-to-list
   'load-path (concat
               straight-base-dir
               (format "straight/%s/vertico/extensions" straight-build-dir)))
  ;; In the minibuffer, "C-k" is be mapped to act like "<up>". However, in
  ;; Emacs, "C-k" have a special meaning of `kill-line'. So lets map "C-S-k"
  ;; to serve the original "C-k".
  (define-key minibuffer-local-map (kbd "C-S-k") #'kill-line)
  :config
  (with-eval-after-load 'evil
    (define-key vertico-map (kbd "C-j") #'vertico-next)
    (define-key vertico-map (kbd "C-k") #'vertico-previous)))

(use-package vertico-directory
  :after vertico
  :demand t
  :config
  (define-key vertico-map "\r" #'vertico-directory-enter)
  (define-key vertico-map "\d" #'vertico-directory-delete-char)
  (define-key vertico-map "\M-\d" #'vertico-directory-delete-word)
  (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)

  (with-eval-after-load 'evil
    (define-key vertico-map (kbd "M-h") #'vertico-directory-up)))

(use-package vertico-repeat
  :hook (minibuffer-setup . vertico-repeat-save)
  :init
  (keymap-global-set "M-R" #'vertico-repeat))
#+end_src
*** me-completion.el 文件尾
#+begin_src emacs-lisp
(provide 'me-completion)
;;; me-completion ends here
#+end_src
** me-core-ui.el
:properties:
:header-args: :tangle core/me-core-ui.el
:end:
=me-core-ui.el= 界面相关包
*** me-core-ui.el 文件头
#+begin_src emacs-lisp
;;; me-core-ui.el --- MinEmacs -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** me-core-ui.el 调整行号大小
#+begin_src emacs-lisp
 (defun +theme--tweaks-h (&optional _)
   "Use smaller font (75% of the default) for line numbers in graphic mode."
   (when (display-graphic-p)
     (set-face-attribute
      'line-number nil
      :background (face-attribute 'default :background)
      :height (truncate (* 0.75 (face-attribute 'default :height)))
      :weight 'semi-light)
     (set-face-attribute
      'line-number-current-line nil
      :height (truncate (* 0.75 (face-attribute 'default :height)))
      :weight 'bold)))

 ;; Apply tweaks
 (add-hook 'after-init-hook #'+theme--tweaks-h)
 (add-hook 'enable-theme-functions #'+theme--tweaks-h)

 ;; Save enabled theme
 (add-hook
  'enable-theme-functions
  (defun +theme--save-enabled-theme-h (theme)
    "Save the enabled theme to `minemacs-theme'.
 Useful for keeping track of the enabled theme."
    (setq minemacs-theme theme)))
#+end_src
*** me-core-ui.el 主题相关
#+begin_src emacs-lisp
;; Disable previously enabled custom themes before enabling a new one.
(advice-add
 'load-theme :before
 (defun +theme--disable-previous-themes-a (&rest _)
   "Disable previously enabled themes before enabling the new one."
   (mapc #'disable-theme custom-enabled-themes)))

(use-package modus-themes
  :straight (:host github :repo "protesilaos/modus-themes")
  :config
  ;; In all of the following, WEIGHT is a symbol such as `semibold',
  ;; `light', `bold', or anything mentioned in `modus-themes-weights'.
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs t
        modus-themes-mixed-fonts nil
        modus-themes-variable-pitch-ui nil
        modus-themes-custom-auto-reload t

        ;; Options for `modus-themes-prompts' are either nil (the
        ;; default), or a list of properties that may include any of those
        ;; symbols: `italic', `WEIGHT'
        modus-themes-prompts '(semi-bold)

        ;; The `modus-themes-completions' is an alist that reads two
        ;; keys: `matches', `selection'.  Each accepts a nil value (or
        ;; empty list) or a list of properties that can include any of
        ;; the following (for WEIGHT read further below):
        ;; `matches'   :: `underline', `italic', `WEIGHT'
        ;; `selection' :: `underline', `italic', `WEIGHT'
        modus-themes-completions
        '((matches   . (extrabold))
          (selection . (semibold text-also)))

        modus-themes-org-blocks 'gray-background ; {nil,'gray-background,'tinted-background}

        ;; The `modus-themes-headings' is an alist: read the manual's
        ;; node about it or its doc string.  Basically, it supports
        ;; per-level configurations for the optional use of
        ;; `variable-pitch' typography, a height value as a multiple of
        ;; the base font size (e.g. 1.5), and a `WEIGHT'.
        modus-themes-headings
        '((1                . (1.4))
          (2                . (1.3))
          (3                . (1.2))
          (agenda-date      . (1.2))
          (agenda-structure . (light 1.5))
          (t                . (1.1)))

        modus-themes-common-palette-overrides
        `(;; Customize the mode-line colors
          (bg-mode-line-active bg-blue-intense)
          (fg-mode-line-active fg-main)

          ;; From the section "Make the mode line borderless"
          (border-mode-line-active unspecified)
          (border-mode-line-inactive unspecified)

          ;; From the section "Make matching parenthesis more or less intense"
          (bg-paren-match bg-blue-intense)
          (underline-paren-match unspecified)

          ;; Links
          (underline-link border)
          (underline-link-visited border)
          (underline-link-symbolic border)

          ;; Comments are yellow, strings are green
          (comment yellow-cooler)
          (string green-warmer)

          ;; And expand the preset here. Note that the ,@ works because we use
          ;; the backtick for this list, instead of a straight quote.
          ,@modus-themes-preset-overrides-faint))

  ;; Load the theme of your choice.
  (load-theme 'modus-operandi-tinted t))

(use-package all-the-icons
  :straight t
  :config
  ;; Show .m files as matlab/octave files
  (setcdr (assoc "m" all-the-icons-extension-icon-alist)
          (cdr (assoc "matlab" all-the-icons-extension-icon-alist))))

(use-package doom-themes
  :straight t)

(use-package apropospriate-theme
  :straight t)
#+end_src
*** me-core-ui.el [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]]
#+begin_src emacs-lisp
(use-package dashboard
  :straight t
  :after evil evil-collection
  :demand t
  :init
  (+map! "oD" #'dashboard-open)
  :custom
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-center-content t)
  (dashboard-banner-ascii "MinEmacs")
  (dashboard-banner-logo-title "Welcome to MinEmacs!")
  (dashboard-items '((recents . 5) (projects . 5) (bookmarks . 5)))
  (dashboard-image-banner-max-width 600)
  (dashboard-projects-backend 'project-el)
  (dashboard-startup-banner (concat minemacs-assets-dir "images/minemacs.png"))
  :config
  ;; Ensure setting the keybindings before openning the dashboard
  (evil-collection-dashboard-setup)

  ;; Avoid openning the dashboard when Emacs starts with an open file.
  (when (zerop (length (seq-filter #'identity (mapcar #'buffer-file-name (buffer-list)))))
    (dashboard-open)))
#+end_src
*** me-core-ui.el doom-modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :straight t
  :hook (minemacs-after-startup . doom-modeline-mode)
  :custom
  (doom-modeline-height 35)
  (doom-modeline-bar-width 8)
  (doom-modeline-time-icon nil)
  (doom-modeline-buffer-encoding 'nondefault)
  (doom-modeline-unicode-fallback t)
  :config
  ;; HACK: Add some padding to the right
  (doom-modeline-def-modeline 'main
    '(bar workspace-name window-number modals matches follow buffer-info
      remote-host buffer-position word-count parrot selection-info)
    '(compilation objed-state misc-info persp-name battery grip irc mu4e gnus
      github debug repl lsp minor-modes input-method indent-info buffer-encoding
      major-mode process vcs checker time "  ")))
#+end_src
*** me-core-ui.el 文件尾
#+begin_src emacs-lisp
(provide 'me-core-ui)
;;; me-core-ui ends here
#+end_src
** me-defaults.el
:properties:
:header-args: :tangle core/me-defaults.el
:end:
*** me-defaults.el 文件头
#+begin_src emacs-lisp
;;; me-defaults.el --- MinEmacs defaults for Emacs -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** me-defaults.el gun广告关闭
#+begin_src emacs-lisp
 ;; Inhibit startup message in echo area the brutal way!
 ;; The `inhibit-startup-echo-area-message' variable is very restrictive, there
 ;; is only one unique way of setting it right!
 ;; See: reddit.com/r/emacs/comments/6e9o4o/comment/di8q1t5
 (fset 'display-startup-echo-area-message #'ignore)
#+end_src
*** me-defaults.el 编码UTF-8
#+begin_src emacs-lisp
;;; Why use anything but UTF-8?
(prefer-coding-system 'utf-8)
(set-charset-priority 'unicode)
(set-default-coding-systems 'utf-8)
(set-locale-environment "en_US.UTF-8")
;; Use UTF-16-LE in Windows, see: rufflewind.com/2014-07-20/pasting-unicode-in-emacs-on-windows
(set-selection-coding-system (if os/win 'utf-16-le 'utf-8))
;; 配置所有的编码为UTF-8，参考：
;; https://thraxys.wordpress.com/2016/01/13/utf-8-in-emacs-everywhere-forever/
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment 'utf-8)
(set-clipboard-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(modify-coding-system-alist 'process "*" 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src
*** me-defaults.el 一些默认参数的设置
#+begin_src emacs-lisp
(setq
 ;; ====== Default directories for builtin packages ======
 backup-directory-alist (list (cons "." (+directory-ensure minemacs-local-dir "backup/")))
 auto-save-list-file-prefix (+directory-ensure minemacs-local-dir "auto-save/")
 abbrev-file-name (concat minemacs-local-dir "abbrev.el")
 project-list-file (concat minemacs-local-dir "project-list.el")
 tramp-backup-directory-alist backup-directory-alist
 tramp-auto-save-directory (concat minemacs-local-dir "tramp/auto-save/")
 tramp-persistency-file-name (concat minemacs-local-dir "tramp/persistency.el")
 url-configuration-directory (+directory-ensure minemacs-local-dir "url/")
 url-cookie-file (concat minemacs-local-dir "url/cookie.el")
 url-history-file (concat minemacs-local-dir "url/history.el")
 url-cache-directory (+directory-ensure minemacs-cache-dir "url/")
 save-place-file (concat minemacs-local-dir "save-place.el")
 savehist-file (concat minemacs-local-dir "savehist.el")
 org-id-locations-file (concat minemacs-cache-dir "org/id-locations.el")
 org-persist-directory (+directory-ensure minemacs-cache-dir "org/persist/")
 org-publish-timestamp-directory (+directory-ensure minemacs-cache-dir "org/publish/timestamps/")
 org-preview-latex-image-directory (+directory-ensure minemacs-cache-dir "org/preview/latex-image/")
 recentf-save-file (concat minemacs-local-dir "recentf-save.el")
 shared-game-score-directory (+directory-ensure minemacs-local-dir "shared-game-score/")
 type-break-file-name (concat minemacs-local-dir "type-break.el")
 bookmark-default-file (concat minemacs-local-dir "bookmark.el")
 ede-project-placeholder-cache-file (concat minemacs-local-dir "ede-projects.el")
 kkc-init-file-name (concat minemacs-local-dir "kkc-init-file.el")
 erc-dcc-get-default-directory (+directory-ensure minemacs-local-dir "erc/dcc/")
 erc-log-channels-directory (+directory-ensure minemacs-local-dir "erc/log-channels/")
 eshell-directory-name (+directory-ensure minemacs-local-dir "eshell/")
 eshell-history-file-name (concat minemacs-local-dir "eshell/history.el")
 eshell-last-dir-ring-file-name (concat minemacs-local-dir "eshell/last-dir-ring.el")
 eshell-aliases-file (concat minemacs-local-dir "eshell/aliases")
 eshell-rc-script (concat minemacs-local-dir "eshell/rc")
 eshell-login-script (concat minemacs-local-dir "eshell/login")
 calc-settings-file (concat minemacs-local-dir "calc-settings.el")
 auto-insert-directory (+directory-ensure minemacs-local-dir "auto-insert/")
 image-dired-dir (+directory-ensure minemacs-local-dir "image-dired/")
 image-dired-tags-db-file (concat minemacs-local-dir "image-dired/tags-db.el")
 image-dired-temp-rotate-image-file (concat minemacs-cache-dir "image-dired/temp-rotate-image")
 eudc-options-file (concat minemacs-local-dir "eudc-options.el")
 eww-bookmarks-directory (+directory-ensure minemacs-local-dir "eww/bookmarks/")
 shadow-info-file (concat minemacs-local-dir "shadow/info.el")
 shadow-todo-file (concat minemacs-local-dir "shadow/todo.el")
 semanticdb-default-system-save-directory (concat minemacs-local-dir "semantic/")
 desktop-dirname (+directory-ensure minemacs-local-dir "desktop/")
 desktop-path (list desktop-dirname)
 custom-theme-directory (concat minemacs-config-dir "themes/")

 ;; ====== Default behavior ======
 ;; Inhibit startup message
 inhibit-startup-message t
 ;; Do not ring
 ring-bell-function #'ignore
 ;; Set to non-nil to flash!
 visible-bell nil
 ;; Increase the large file threshold to 50 MiB
 large-file-warning-threshold (* 50 1024 1024)
 ;; Initial scratch message (will be overridden if "fortune" is installed)
 initial-scratch-message ";; MinEmacs -- start here!"
 ;; Set initial buffer to fundamental-mode for faster load
 initial-major-mode 'fundamental-mode
 ;; Always prompt in minibuffer (no GUI)
 use-dialog-box nil
 ;; Use y or n instead of yes or no
 use-short-answers t
 ;; Confirm before quitting
 confirm-kill-emacs #'y-or-n-p
 ;; Filter duplicate entries in kill ring
 kill-do-not-save-duplicates t
 ;; Save existing clipboard text into the kill ring before replacing it.
 save-interprogram-paste-before-kill t
 ;; Save files only in sub-directories of current project
 save-some-buffers-default-predicate #'save-some-buffers-root
 ;; Use single space between sentences
 sentence-end-double-space nil
 ;; Move stuff to trash
 delete-by-moving-to-trash t
 ;; Select help window for faster quit!
 help-window-select t
 ;; More info on completions
 completions-detailed t
 ;; Do not ask obvious questions, follow symlinks
 vc-follow-symlinks t
 ;; Display the true file name for symlinks
 find-file-visit-truename t
 ;; Use completion in the minibuffer instead of definitions buffer
 xref-show-definitions-function #'xref-show-definitions-completing-read
 ;; Enable recursive calls to minibuffer
 enable-recursive-minibuffers t
 ;; Kill the shell buffer after exit
 shell-kill-buffer-on-exit t

 ;; ====== Passwords and encryption ======
 ;; Enable password caching
 password-cache t
 ;; One minute, default is 16
 password-cache-expiry 60
 ;; Default auth-sources to GPG
 auth-sources '("~/.authinfo.gpg")
 ;; Enable caching, do not keep asking about GPG key
 auth-source-do-cache t
 ;; All day, default is 2h (7200)
 auth-source-cache-expiry 86400

 ;; ====== Performances ======
 ;; Don’t compact font caches during GC
 inhibit-compacting-font-caches t
 ;; Increase single chunk bytes to read from subprocess (default 4096)
 read-process-output-max (if os/linux
                             (condition-case nil
                                 ;; Android may raise permission-denied error
                                 (with-temp-buffer
                                   (insert-file-contents
                                    "/proc/sys/fs/pipe-max-size")
                                   (string-to-number (buffer-string)))
                               ;; If an error occured, fallback to the default value
                               (error read-process-output-max))
                           (* 1024 1024))

 ;; ====== Aesthetics and UI ======
 ;; Do force frame size to be a multiple of char size
 frame-resize-pixelwise t
 ;; Stretch cursor to the glyph width
 x-stretch-cursor t
 ;; Show trailing whitespaces
 show-trailing-whitespace t
 ;; Resize window combinations proportionally
 window-combination-resize t
 ;; Enable time in the mode-line
 display-time-string-forms '((propertize (concat 24-hours ":" minutes)))
 ;; Relative line numbering
 display-line-numbers-type 'relative
 ;; No ugly button for widgets
 widget-image-enable nil
 ;; Show unprettified symbol under cursor (when in `prettify-symbols-mode')
 prettify-symbols-unprettify-at-point t
 ;; Make tooltips last a bit longer (default 10s)
 tooltip-hide-delay 20
 ;; Use small frames to display tooltips instead of the default OS tooltips
 use-system-tooltips nil

 ;; ====== Undo ======
 ;; 10MB (default is 160kB)
 undo-limit 10000000
 ;; 50MB (default is 240kB)
 undo-strong-limit 50000000
 ;; 150MB (default is 24MB)
 undo-outer-limit 150000000

 ;; ====== Editing ======
 ;; Hitting TAB behavior
 tab-always-indent nil
 ;; Default behavior for `whitespace-cleanup'
 whitespace-action '(cleanup auto-cleanup)
 ;; End files with newline
 require-final-newline t
 ;; Enable Drag-and-Drop of regions
 mouse-drag-and-drop-region t
 ;; Enable Drag-and-Drop of regions from Emacs to external programs
 mouse-drag-and-drop-region-cross-program t

 ;; ====== Backups ======
 ;; Disable lockfiles
 create-lockfiles nil
 ;; Enable making backup files
 make-backup-files t
 ;; Number each backup file
 version-control t
 ;; Copy instead of renaming current file
 backup-by-copying t
 ;; Clean up after itself
 delete-old-versions t
 ;; Keep up to 5 old versions of each file
 kept-old-versions 5
 ;; Keep up to 5 new versions of each file
 kept-new-versions 5
 ;; Keep up to 5 versions when cleaning a directory
 dired-kept-versions 5

 ;; ====== Scrolling ======
 ;; Do not adjust window-vscroll to view tall lines. Fixes some lag issues see:
 ;; emacs.stackexchange.com/a/28746
 auto-window-vscroll nil
 ;; Fast scrolling
 fast-but-imprecise-scrolling t
 ;; Keep the point in the same position while scrolling
 scroll-preserve-screen-position t
 ;; Do not move cursor to the center when scrolling
 scroll-conservatively 101
 ;; Scroll at a margin of one line
 scroll-margin 1
 ;; Better scrolling on Emacs29+, specially on a touchpad
 pixel-scroll-precision-use-momentum t

 ;; ====== Recent files ======
 ;; Increase the maximum number of saved items
 recentf-max-saved-items 100
 ;; Ignore case when searching recentf files
 recentf-case-fold-search t
 ;; Exclude some files from being remembered by recentf
 recentf-exclude
 `(,(rx (* any)
     (or
      "elfeed-db"
      "eln-cache"
      "/cache/"
      ".maildir/"
      ".cache/")
     (* any)
     (? (or "html" "pdf" "tex" "epub")))
   ,(rx "/"
     (or "rsync" "ssh" "tmp" "yadm" "sudoedit" "sudo")
     (* any)))

 ;; ====== Timestamps ======
 ;; Do enable time-stamps
 time-stamp-active t
 ;; Check the first 12 buffer lines for Time-stamp: <>
 time-stamp-line-limit 12
 ;; Timestamp format
 time-stamp-format "%04Y-%02m-%02d %02H:%02M:%02S"

 ;; ====== Auto-Saving, sessions ======
 ;; Enable auto-save (use `recover-file' or `recover-session' to recover)
 auto-save-default t
 ;; Include big deletions
 auto-save-include-big-deletions t
 ;; Set file naming transform
 auto-save-file-name-transforms (list
                                 ;; Prefix tramp autosaves with "tramp-"
                                 (list
                                  "\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'"
                                  (concat auto-save-list-file-prefix "tramp-\\2") t)
                                 ;; Local autosaves
                                 (list ".*" auto-save-list-file-prefix t))
 ;; File name to use when saving desktop
 desktop-base-file-name "emacs-session.el"
 ;; File name to use as a lock
 desktop-base-lock-name (concat desktop-base-file-name ".lock")
 ;; Load only 5 buffers immediately, the remaining buffers will be loaded lazily
 desktop-restore-eager 5
 ;; Avoid writing contents unchanged between auto-saves
 desktop-file-checksum t

 ;; ====== Compilation ======
 ;; Scroll compilation buffer
 compilation-scroll-output t ; 'first-error can be a good option
 ;; Always kill current compilation process before starting a new one
 compilation-always-kill t
 ;; Skip visited messages on compilation motion commands
 compilation-skip-visited t
 ;; Keep it readable
 compilation-window-height 12

 ;; ====== Misc ======
 ;; Set `webjump' sites to manily search engins
 webjump-sites
 '(("Emacs Wiki"    . [simple-query "www.emacswiki.org" "www.emacswiki.org/cgi-bin/wiki/" ""])
   ("DuckDuckGo"    . [simple-query "duckduckgo.com" "duckduckgo.com/?q=" ""])
   ("Qwant"         . [simple-query "www.qwant.com" "www.qwant.com/?q=" ""])
   ("Ecosia"        . [simple-query "www.ecosia.org" "www.ecosia.org/search?q=" ""])
   ("Brave"         . [simple-query "search.brave.com" "search.brave.com/search?q=" ""])
   ("Bing"          . [simple-query "www.bing.com" "www.bing.com/search?q=" ""])
   ("Yahoo"         . [simple-query "www.yahoo.com" "search.yahoo.com/search?p=" ""])
   ("Google"        . [simple-query "www.google.com" "www.google.com/search?q=" ""])
   ("Google Maps"   . [simple-query "www.google.com" "www.google.com/maps?q=" ""])
   ("Google Images" . [simple-query "www.google.com" "www.google.com/images?q=" ""])
   ("Google Groups" . [simple-query "groups.google.com" "groups.google.com/groups?q=" ""])
   ("StackOverflow" . [simple-query "stackoverflow.com" "stackoverflow.com/search?q=" ""])
   ("GitHub Repo"   . [simple-query "github.com" "github.com/search?type=repositories&q=" ""])
   ("GitHub Code"   . [simple-query "github.com" "github.com/search?type=code&q=" ""])
   ("WolframAlpha"  . [simple-query "wolframalpha.com" "wolframalpha.com/input/?i=" ""])
   ("MDN"           . [simple-query "developer.mozilla.org" "developer.mozilla.org/search?q=" ""])
   ("Youtube"       . [simple-query "www.youtube.com" "www.youtube.com/results?search_query=" ""])
   ("Reddit"        . [simple-query "www.reddit.com" "www.reddit.com/search/?q=" ""])
   ("Wikipedia"     . [simple-query "wikipedia.org" "wikipedia.org/wiki/" ""])))

(setq-default
 ;; ====== Buffer-local variables ======
 ;; Display long lines
 truncate-lines nil
 ;; Default fill column width
 fill-column 80
 ;; Never mix, use only spaces
 indent-tabs-mode nil
 ;; Width for line numbers
 display-line-numbers-width 4
 ;; Small tab is enough!
 tab-width 2
 ;; Save buffer status
 desktop-save-buffer t)

;; ====== Misc hooks and advices ======
;; Advice `emacs-session-filename' to ensure creating "session.ID" files in
;; a sub-directory
(with-eval-after-load 'x-win
  (advice-add
   #'emacs-session-filename :filter-return
   (defun +emacs-session-filename--in-subdir-a (session-filename)
     "Put the SESSION-FILENAME in the \"x-win/\" sub-directory."
     (concat (+directory-ensure minemacs-local-dir "x-win/")
             (file-name-nondirectory session-filename)))))

;; Kill `term' buffer on exit (reproduce a similar behavior to `shell's
;; `shell-kill-buffer-on-exit').
(advice-add
 'term-sentinel :around
 (defun +term--kill-after-exit-a (orig-fn proc msg)
   (if (memq (process-status proc) '(signal exit))
       (let ((buffer (process-buffer proc)))
         (apply orig-fn (list proc msg))
         (kill-buffer buffer))
     (apply orig-fn (list proc msg)))))

;; Kill the minibuffer when switching by mouse to another window.
;; Adapted from: trey-jackson.blogspot.com/2010/04/emacs-tip-36-abort-minibuffer-when.html
(add-hook
 'mouse-leave-buffer-hook
 (defun +minibuffer--kill-on-mouse-h ()
   "Kill the minibuffer when switching to window with mouse."
   (when (and (>= (recursion-depth) 1) (active-minibuffer-window))
     (abort-recursive-edit))))

;; ====== Tweaks on file save ======
;; Update time stamp (if available) before saving a file.
(add-hook 'before-save-hook 'time-stamp)

(defcustom +whitespace-auto-cleanup-modes
  '(prog-mode conf-mode org-mode markdown-mode
    latex-mode tex-mode bibtex-mode)
  "Enable auto white space cleanup before saving for these derived modes."
  :group 'minemacs-edit
  :type '(repeat symbol))

;; Auto-remove trailing white spaces before saving for modes defined in
;; `+whitespace-auto-cleanup-modes'.
(add-hook
 'before-save-hook
 (defun +save--whitespace-cleanup-h ()
   (when (cl-some #'derived-mode-p +whitespace-auto-cleanup-modes)
     (whitespace-cleanup))))

;; Guess the major mode after saving a file in `fundamental-mode' (adapted
;; from Doom Emacs).
(add-hook
 'after-save-hook
 (defun +save--guess-file-mode-h ()
   "Guess major mode when saving a file in `fundamental-mode'.
Likely, something has changed since the buffer was opened. e.g. A shebang line
or file path may exist now."
   (when (eq major-mode 'fundamental-mode)
     (let ((buffer (or (buffer-base-buffer) (current-buffer))))
       (and (buffer-file-name buffer)
            (eq buffer (window-buffer (selected-window))) ;; Only visible buffers
            (set-auto-mode))))))

;; ====== Modes enabled locally, mainly for `prog-mode', `conf-mode' and `text-mode' ======
;; Show line numbers
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
(add-hook 'conf-mode-hook #'display-line-numbers-mode)
(add-hook 'text-mode-hook #'display-line-numbers-mode)

;; Highlight the current line
(add-hook 'prog-mode-hook #'hl-line-mode)
(add-hook 'conf-mode-hook #'hl-line-mode)
(add-hook 'text-mode-hook #'hl-line-mode)

;; Hide/show code blocks, a.k.a. code folding
(add-hook 'prog-mode-hook #'hs-minor-mode)
(add-hook 'conf-mode-hook #'hs-minor-mode)

;; Wrap long lines
(add-hook 'prog-mode-hook #'visual-line-mode)
(add-hook 'conf-mode-hook #'visual-line-mode)
(add-hook 'text-mode-hook #'visual-line-mode)

;; When MinEmacs is running in an asynchronous Org export context, there is no
;; need to enable these modes. So we load them only if we haven't been launched
;; through the `me-org-export-async-init' file.
;; All modes and tweaks are enabled after MinEmacs is gets loaded
(+deferred-unless! (featurep 'me-org-export-async-init)
  ;; Navigate windows using Shift+Direction
  (windmove-default-keybindings)

  ;; ====== Modes enabled globally ======
  ;; Show the battery status (if available) in the mode-line
  (+shutup!
   (let ((battery-str (battery)))
     (unless (or (equal "Battery status not available" battery-str)
                 (string-match-p "unknown" battery-str)
                 (string-match-p "N/A" battery-str))
       (display-battery-mode 1))))

  ;; Fallback the new `fido-vertical-mode' Emacs28+ builtin completion mode if
  ;; the `me-completion' (which contains `vertico-mode' configuration) core
  ;; module is not enabled.
  (unless (memq 'me-completion minemacs-core-modules)
    (fido-vertical-mode 1))

  ;; Window layout undo/redo (`winner-undo' / `winner-redo')
  (winner-mode 1)

  ;; Scroll pixel by pixel, in Emacs29+ there is a more pricise mode way to scroll
  (if (>= emacs-major-version 29)
      (pixel-scroll-precision-mode 1)
    (pixel-scroll-mode 1))

  ;; Display time in mode-line
  (display-time-mode 1)

  ;; Replace selection after start typing
  (delete-selection-mode 1)

  ;; Enable `recentf-mode' to remember recent files
  (+shutup! (recentf-mode 1))

  ;; Show recursion depth in minibuffer (see `enable-recursive-minibuffers')
  (minibuffer-depth-indicate-mode 1)

  ;; Save place in files
  (save-place-mode 1)

  ;; Enable saving minibuffer history
  (savehist-mode 1)

  ;; Auto load files changed on disk
  (global-auto-revert-mode 1)

  ;; Show line number in mode-line
  (line-number-mode 1)

  ;; Show column numbers (a.k.a. cursor position) in the mode-line
  (column-number-mode 1)

  ;; Better handling for files with so long lines
  (global-so-long-mode 1)

  ;; Save Emacs state from one session to another
  (desktop-save-mode 1)

  ;; Global SubWord mode
  (global-subword-mode 1))
#+end_src
*** me-defaults.el 文件尾
#+begin_src emacs-lisp
(provide 'me-defaults)
;;; me-defaults ends here
#+end_src
** me-evil.el
:properties:
:header-args: :tangle core/me-evil.el
:end:
=me-evil.el= Emacs as Vim
*** me-evil.el 文件头
#+begin_src emacs-lisp
;;; me-evil.el --- Emacs as Vim! -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** me-evil.el pacakge =evil=
#+begin_src emacs-lisp
(use-package evil
  :straight t
  :hook (minemacs-after-startup . evil-mode)
  :preface
  (setq evil-want-keybinding nil)
  :custom
  (evil-want-C-i-jump nil)
  (evil-want-fine-undo t)
  (evil-want-Y-yank-to-eol t)
  (evil-split-window-below t)
  (evil-vsplit-window-right t)
  (evil-kill-on-visual-paste nil)
  (evil-respect-visual-line-mode t)
  (evil-ex-interactive-search-highlight 'selected-window)
  :config
  (+map!
    ;; buffer
    "bN" '(evil-buffer-new :wk "New buffer")
    ;; window
    "ww" '(evil-window-next :wk "Next")
    "wW" '(evil-window-prev :wk "Previous")
    "ws" '(evil-window-split :wk "Split")
    "wv" '(evil-window-vsplit :wk "Vertical split")
    "wr" '(evil-window-rotate-downwards :wk "Rotate downwards")
    "wR" '(evil-window-rotate-upwards :wk "Rotate upwards")
    "w+" '(evil-window-increase-width :wk "Increase width")
    "w-" '(evil-window-decrease-width :wk "Decrease width"))

  ;; Use `evil-search' instead of `isearch'
  (evil-select-search-module 'evil-search-module 'evil-search)

  ;; Ask for a buffer when splitting windows
  (with-eval-after-load 'consult
    (dolist (fn '(evil-window-split evil-window-vsplit))
      (advice-add
       fn :after
       (defun +evil--cunsult-buffer-after-window-split-a (&rest _)
         (consult-buffer))))))
#+end_src
*** me-evil.el pacakge =evil-collection=
#+begin_src emacs-lisp
(use-package evil-collection
  :straight t
  :after evil minemacs-loaded
  :demand t
  :config
  (evil-collection-init
   (seq-filter
    (lambda (mode)
      (not (memq mode '(evil-mc ; Default bindings for `evil-mc' are messy
                        mu4e ; TEMP: until `evil-collection-mu4e' gets fixed, see github.com/emacs-evil/evil-collection/issues/695
                        elisp-mode)))) ; I don't like "gz" for `ielm', I like "gr" though
    evil-collection-mode-list))

  ;; Use "gr" to find references for elisp mode
  (with-eval-after-load 'elisp-mode
    (when evil-collection-want-find-usages-bindings
      (evil-collection-define-key 'normal 'emacs-lisp-mode-map
        "gr" 'xref-find-references)))

  ;; TEMP: Fix `mu4e' evil integraion
  (with-eval-after-load 'mu4e
    (require 'loadhist) ; to use `feature-file'

    ;; To avoid calling `evil-collection-mu4e--main-action-str'
    (defvar evil-collection-mu4e-new-region-basic nil)

    (require 'evil-collection-mu4e
             (concat (file-name-directory (feature-file 'evil-collection))
                     "modes/mu4e/evil-collection-mu4e.el"))

    (evil-collection-mu4e-set-state)
    (evil-collection-mu4e-set-bindings)

    ;; Fix some missed up bindings
    (defalias 'mu4e~view-quit-buffer #'mu4e-view-quit)

    (add-hook 'org-mode-hook #'evil-collection-mu4e-org-set-header-to-normal-mode)
    (add-hook 'mu4e-compose-pre-hook #'evil-collection-mu4e-org-set-header-to-insert-mode)))
#+end_src
*** me-evil.el pacakge =evil-snipe=
#+begin_src emacs-lisp
(use-package evil-snipe
  :straight t
  :hook (minemacs-after-startup . evil-snipe-mode)
  :hook (minemacs-after-startup . evil-snipe-override-mode)
  :custom
  (evil-snipe-scope 'buffer)
  (evil-snipe-smart-case t)
  (evil-snipe-auto-scroll t))
#+end_src
*** me-evil.el package =evil-numbers=
#+begin_src emacs-lisp
 (use-package evil-numbers
   :straight t
   :init
   (+nmap!
     "g+" #'evil-numbers/inc-at-pt
     "g=" #'evil-numbers/inc-at-pt
     "g-" #'evil-numbers/dec-at-pt)
   (+vmap!
     "g+" #'evil-numbers/inc-at-pt-incremental
     "g=" #'evil-numbers/inc-at-pt-incremental
     "g-" #'evil-numbers/dec-at-pt-incremental))
#+end_src
*** me-evil.el package =evil-nerd-commenter=
#+begin_src emacs-lisp
 (use-package evil-nerd-commenter
   :straight t
   :commands evilnc-comment-operator
   :init
   (+nvmap! "gc" #'evilnc-comment-operator))
#+end_src
*** me-evil.el pacakge =evil-escape=
#+begin_src emacs-lisp
 (use-package evil-escape
   :straight t
   :hook (evil-mode . evil-escape-mode)
   :custom
   ;; The default "fd" interfere with the "f" (bound to `evil-snipe-f') binding.
   (evil-escape-key-sequence "kj")
   (evil-escape-unordered-key-sequence t)) ; "kj" or "jk"
#+end_src
*** me-evil.el pacakge =evil-surround=
#+begin_src emacs-lisp
(use-package evil-surround
  :straight t
  :demand t
  :config
  (global-evil-surround-mode 1))
#+end_src
*** me-evil.el 文件尾
#+begin_src emacs-lisp
(provide me-evil)
;;; me-evil ends here
#+end_src
** me-gc.el
:properties:
:header-args: :tangle core/me-gc.el
:end:
=me-gc.el=  garbage collection 垃圾回收
*** me-gc.el 文件头
#+begin_src emacs-lisp
;;; me-gc.el --- garbage collection -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** me-gc.el package gcmh
#+begin_src emacs-lisp
 (use-package gcmh
   :straight t
   :hook (minemacs-lazy . gcmh-mode)
   :custom
   ;; Set the delay to 20s instead of the default 15. I tried using `auto', but
   ;; with the default 20 of `gcmh-auto-idle-delay-factor', it triggers GC each
   ;; 1s on my machine. Setting the factor to a higher value should solve the
   ;; issue on my machine, but I don't think it is right to assume it will work
   ;; the same way on other machines. So we switch back to a fixed delay of 20s.
   (gcmh-idle-delay 20)
   ;; The default `gcmh's 1GB is probably too high. We set it to 256MB on 64bit
   ;; systems, or 16MB on 32bit ones.
   (gcmh-high-cons-threshold
    (* 1024 1024 (if (string-suffix-p "64" (symbol-name sys/arch)) 256 16))))
#+end_src
*** me-gc.el 文件尾
#+begin_src emacs-lisp
(provide me-gc)
;;; me-gc ends here
#+end_src
** me-keybindings.el
:properties:
:header-args: :tangle core/me-keybindings.el
:end:
=me-keybindings.el= 按键相关包
*** me-keybindings.el 文件头
#+begin_src emacs-lisp
;;; me-keybindings.el --- Default keybindings -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** me-keybindings.el package =which-key=
#+begin_src emacs-lisp
 (use-package which-key
   :straight t
   :hook (minemacs-after-startup . which-key-mode)
   :custom
   (which-key-idle-delay 1.0)
   (which-key-idle-secondary-delay nil)
   (which-key-ellipsis "..")
   (which-key-prefix-prefix "+")
   (which-key-sort-order 'which-key-key-order-alpha)
   (which-key-min-display-lines 3)
   (which-key-max-display-columns nil)
   ;; Allow a key binding to be modified by multiple rules in
   ;; `which-key-replacement-alist'
   (which-key-allow-multiple-replacements t)
   :config
   (setq
    which-key-replacement-alist
    (append
     which-key-replacement-alist
     (list
      '(("\\`g z" . "\\`evil-\\(?:mc\\|multiedit\\)-\\(.*\\)")    . (nil . "⌶·\\1"))
      '(("\\`g c" . "\\`evilnc-\\(.*\\)")                         . (nil . "#·\\1"))
      '(("\\`g" . "\\`[Ii]nfo[-:]?\\(?:a-\\)?\\(.*\\)")           . (nil . "ɩ·\\1"))
      '(("\\`SPC TAB" . "\\`tabspaces-\\(.*\\)")                  . (nil . "⭾·\\1"))
      '(("\\`SPC p" . "\\`\\+?\\(?:consult-\\)?project-\\(.*\\)") . (nil . "🅟·\\1"))
      '(("" . "\\`evil[-:]?\\(?:a-\\)?\\(.*\\)")                  . (nil . "ɛ·\\1")))))
   ;; Setup `which-key' integration with the minibuffer
   (which-key-setup-minibuffer))
#+end_src
*** me-keybindings.el package =general=
#+begin_src emacs-lisp
(use-package general
  :straight t
  ;; PERF: Loading `general' early make Emacs very slow on startup.
  :after evil
  :demand t
  :config
  ;; Advise `define-key' to automatically unbind keys when necessary.
  (general-auto-unbind-keys)
  ;; Set up some basic equivalents (like `general-nmap') with short named
  ;; aliases (like `nmap') for VIM mapping functions.
  (general-evil-setup t)

  ;; Global leader
  (general-create-definer +minemacs--internal-map!
    ;; The order of states matters, the last is prioritized
    :states '(insert emacs visual normal)
    :keymaps 'override
    :prefix minemacs-leader-key
    :global-prefix minemacs-global-leader-prefix)

  ;; Local leader
  (general-create-definer +minemacs--internal-map-local!
    :states '(insert emacs visual normal)
    :keymaps 'override
    :prefix minemacs-localleader-key
    :global-prefix minemacs-global-mode-prefix)

  ;; Define the built-in global keybindings
  (+minemacs--internal-map!
    ;; ====== Top level functions ======
    "SPC" '(execute-extended-command :wk "M-x")
    ">"   '(switch-to-next-buffer :wk "Next buffer")
    "<"   '(switch-to-prev-buffer :wk "Previous buffer")
    ";"   '(pp-eval-expression :wk "Eval expression")
    "X"   #'org-capture
    "u"   '(universal-argument :wk "C-u")
    "C"   #'universal-coding-system-argument

    ;; ====== Quit/Session ======
    "q"   '(nil :wk "quit/session")
    "qq"  #'save-buffers-kill-terminal
    "qQ"  #'kill-emacs
    "qS"  #'server-start
    "qR"  #'recover-session
    "qd"  #'desktop-read
    "qD"  #'desktop-lazy-complete
    "qs"  #'desktop-save

    ;; ====== Files ======
    "f"   '(nil :wk "file")
    "fS"  '(write-file :wk "Save as ...")
    "fD"  #'+delete-this-file
    "fu"  #'+sudo-find-file
    "fU"  #'+sudo-this-file
    "fR"  #'+move-this-file
    "ff"  #'find-file
    "fs"  #'save-buffer
    "ft"  #'recover-this-file
    "fT"  #'recover-file
    "fy"  #'+yank-this-file-name
    "fE"  `(,(+cmdfy! (dired (or minemacs-config-dir minemacs-root-dir)))
            :wk "User config directory")

    ;; ====== Buffers ======
    "b"   '(nil :wk "buffer")
    "bI"  #'ibuffer
    "bu"  #'+sudo-save-buffer
    "bS"  #'save-some-buffers
    "bs"  #'scratch-buffer
    "bM"  #'view-echo-area-messages
    "bA"  #'+kill-some-buffers
    "bk"  `(,(+cmdfy! (kill-buffer (current-buffer)))
            :wk "Kill this buffer")
    "bK"  `(,(+cmdfy! (+kill-buffer-and-its-windows (current-buffer)))
            :wk "Kill this buffer and its windows")
    "br"  '(revert-buffer :wk "Revert")
    "bR"  '(rename-buffer :wk "Rename")
    ;; Bookmarks
    "bm"  '(nil :wk "bookmark")
    "bmm"  #'bookmark-set
    "bmd"  #'bookmark-delete
    ;; Files / Local variables
    "bv"  '(nil :wk "locals")
    "bvv" '(add-file-local-variable :wk "Add")
    "bvV" '(delete-file-local-variable :wk "Delete")
    "bvp" '(add-file-local-variable-prop-line :wk "Add in prop line")
    "bvP" '(delete-file-local-variable-prop-line :wk "Delete from prop line")
    "bvd" '(add-dir-local-variable :wk "Add to dir-locals")
    "bvD" '(delete-dir-local-variable :wk "Delete from dir-locals")
    "bvr"  '(nil :wk "reload dir-locals for...")
    "bvrr" '(+dir-locals-reload-for-this-buffer :wk "This buffer")
    "bvrd" '(+dir-locals-reload-for-all-buffers-in-this-directory :wk "All buffers in this directory")

    ;; ====== Insert ======
    "i"   '(nil :wk "insert")
    "iu"  '(insert-char :wk "Unicode char")
    "ie"  `(,(when (>= emacs-major-version 29) #'emoji-search) :wk "Emoji")

    ;; ====== Window ======
    "w"   '(nil :wk "window")
    "wd"  #'delete-window
    "wD"  #'delete-window-on
    "wm"  #'maximize-window
    "wu"  #'winner-undo
    "wU"  #'winner-redo

    ;; ====== Applications (Open) ======
    "o"   '(nil   :wk "app/open")
    "o-"  '(dired :wk "Dired") ;; Will be overwritten if dirvish is used
    "oa"  #'org-agenda
    "oe"  #'eshell

    ;; ====== Search ======
    "s"   '(nil :wk "search")
    "sw"  '+webjump

    ;; ======  Mode specific a.k.a. "local leader" ======
    "m"   '(nil :wk "mode-specific")

    ;; ====== VC ======
    "g"   '(nil :wk "git/vc")

    ;; ====== Workspaces ======
    "TAB" '(nil :wk "workspace")

    ;; ====== Toggle ======
    "t"   '(nil :wk "toggle")
    "td"  '(toggle-debug-on-error :wk "Debug on error")
    "tr"  #'read-only-mode
    "tl"  #'follow-mode
    "tV"  '(netextender-toggle :wk "NetExtender")
    "te"  '(ecryptfs-toggle-mount-private :wk "eCryptfs")
    "tv"  #'visible-mode

    ;; ====== Code ======
    "c"   '(nil :wk "code")
    "cf"  '(nil :wk "format buffer")

    ;; ====== Workspaces ======
    "r"   '(nil :wk "workspace") ;; TODO: use tab-bar-mode and tab-line-mode

    ;; ====== Notes ======
    "n"   '(nil :wk "notes")

    ;; ====== Help ======
    "h"   '(nil :wk "help")
    "hi"  #'info
    "hg"  #'general-describe-keybindings
    "hs"  #'+screenshot-svg
    "he"  '(nil :wk "elisp/emacs")
    "hes" #'elisp-index-search
    "hem" #'info-emacs-manual
    "hei" #'Info-search
    "hd"  '(nil :wk "describe")
    "hdk" #'describe-key
    "hdm" #'describe-keymap
    "hdb" #'describe-bindings
    "hds" #'describe-symbol
    "hdv" #'describe-variable
    "hdc" #'describe-command
    "hdf" #'describe-function
    "hdp" #'describe-package

    ;; ====== Project ======
    "p"   '(nil :wk "project"))

  ;; HACK: This is a synchronization feature, providing `me-general-ready' tells
  ;; the `+map!', `+map-local!', ... macros that `general' is ready and the
  ;; definers `+minemacs--internal-map!', `+minemacs--internal-map-local!', ...
  ;; are available (See the `+map!' macro definition in "elisp/+minemacs.el").
  (provide 'me-general-ready))
#+end_src
*** me-keybindings.el package =hydra=
#+begin_src emacs-lisp
(use-package hydra
   :straight t)
#+end_src
*** me-keybindings.el 文件尾
#+begin_src emacs-lisp
(provide me-keybindings)
;;; me-keybindings ends here
#+end_src
** me-loaddefs.el
=me-loaddefs.el= 此文件是由 =minemacs-generate-loaddefs= 收集autoload 函数
** me-modules.el
:properties:
:header-args: :tangle core/me-modules.el
:end:
=me-modules.el= 模块划分文件
*** me-modules.el 文件头
#+begin_src emacs-lisp
;;; me-modules.el -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** me-modules.el 核心模块
#+begin_src emacs-lisp
(defcustom minemacs-core-modules
  '(me-splash        ; Simple splash screen
    me-keybindings   ; Keybinding (general, which-key, hydra, ...)
    me-evil          ; Emacs as Vim (evil, evil-collection, evil-escape, evil-snipe, evil-numbers, ...)
    me-core-ui       ; Core UI (doom-themes, modus-themes, doom-modeline, ...)
    me-completion)   ; Completion (vertico, marginalia, corfu, cape, consult, embark, ...)
  "MinEmacs enabled core modules."
  :group 'minemacs-core
  :type '(repeat symbol))
#+end_src
*** me-modules.el 定制模块
#+begin_src emacs-lisp
(defcustom minemacs-modules
  '(me-ui            ; User interface (focus, writeroom-mode, mixed-pitch, ...)
    me-editor        ; Editing (yasnippet, smartparens, unicode-fonts, ligature, ...)
    me-daemon        ; Emacs daemon tweaks
    me-undo          ; Better undoing (undo-fu, undo-fu-session, vundo, ...)
    me-multi-cursors ; Multi-cursors editing (iedit, evil-mc, evil-iedit-state, ...)
    me-vc            ; Version control (magit, forge, core-review, diff-hl, ...)
    me-project       ; Project management (project, projectile, consult-projectile, treemacs-projectile, ...)
    me-prog          ; Programming stuff (tree-sitter, eglot, eldoc, eldoc-box, apheleia, editorconfig, ...)
    me-checkers      ; Static checkers (flymake, flymake-easy, ...)
    me-debug         ; Debugging tools (gdb-mi, realgud, disaster, ...)
    ;; me-lsp        ; LSP and DAP (lsp-mode, dap-mode, consult-lsp, lsp-pyright, ccls, ...)
    me-lisp          ; Lisps development (parinfer-rust, sly, macrostep, geiser, elisp, helpful, eros, ...)
    ;; me-embedded   ; Embedded systems (arduino, openocd, bitbake, vhdl-mode, ...)
    ;; me-robot      ; Robotics stuff (ros, robot-mode, ...)
    me-data          ; Data file formats (csv, yaml, toml, json, plantuml-mode, ...)
    ;; me-math       ; Mathematics (maxima, ess, ein, julia-mode, octave, ...)
    ;; me-modeling   ; Modeling tools (scad-mode, ...)
    me-org           ; Org-mode for life (org, org-contrib, org-modern, org-appear, ...)
    me-extra         ; Extra features (better-jumper, crux, ...)
    me-notes         ; Notes & Zettelkasten (org-roam, consult-org-roam, ...)
    me-eaf           ; EAF apps (browser, jupyter, file-sender, ...)
    ;; me-email      ; Email (mu4e, mu4e-alert, org-msg, ...)
    ;; me-rss        ; News feed (elfeed, ...)
    ;; me-lifestyle  ; *Very* opinionated lifestyle packages (awqat, ...)
    me-docs          ; Documents (pdf-tools, nov, ...)
    me-latex         ; LaTeX (auctex, auctex-latexmk, reftex, bibtex, ...)
    ;; me-biblio     ; Bibliography & citations (org-cite, citar, zotxt, ...)
    me-natural-langs ; Natural language stuff (spell-fu, go-translate, eglot-ltex, ...)
    me-files         ; Files and directories (dirvish, treemacs, vlf, ...)
    me-tools         ; System tools (tramp, vterm, tldr, ssh-deploy, docker, ...)
    me-tty           ; Emacs from terminal (xt-mouse, xclip, ...)
    ;; me-fun        ; Games and funny packages (xkcd, speed-type, ...)
    ;; me-media      ; Multimedia (empv, emms, ...)
    ;; me-workspaces ; Workspace separation (tabspaces, tab-bar, ...). NOTE: This is a WIP
    me-binary        ; Display binary files in hex or decompile them (hexl, ...) ...
    me-window)       ; Frame & window tweaks
  "MinEmacs enabled modules."
  :group 'minemacs-core
  :type '(repeat symbol))
#+end_src
*** me-modules.el 文件尾
#+begin_src emacs-lisp
(provide me-modules)
;;; me-modules ends here
#+end_src
** me-splash.el
:properties:
:header-args: :tangle core/me-splash.el
:end:
=me-splash.el= 下载包过程中简易界面 参考 [[github.com/rougier/emacs-splash][emacs-splash]]
*** me-splash.el 文件头
#+begin_src emacs-lisp
;;; me-splash.el -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** me-splash.el 界面定制
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
(defvar minemacs-splash-buffer-name "*minemacs-splash*")

(defun minemacs-splash ()
  "MinEmacs splash screen"
  ;; If there are buffer associated with filenames, we don't show splash screen.
  (when (zerop (length (seq-filter #'identity (mapcar #'buffer-file-name (buffer-list)))))
    (let* ((buffer (get-buffer-create minemacs-splash-buffer-name))
           (height (- (window-body-height nil) 1))
           (padding-center (min 5 (- (/ height 3) 1)))
           (padding-bottom (min 2 (- height (/ height 3) 3))))
      (with-current-buffer buffer
        (erase-buffer)
        ;; Buffer local settings
        (setq-local cursor-type nil
                    vertical-scroll-bar nil
                    horizontal-scroll-bar nil)

        ;; Vertical padding to center
        (insert-char ?\n padding-center)

        ;; Central text
        (insert-char ?\s 10)
        (insert (propertize "MinEmacs" 'face 'bold))
        (insert-char ?\n)
        (insert-char ?\s 10)
        (insert (propertize
                 (format "Running GNU Emacs %s%s"
                         emacs-version
                         (if emacs-repository-version
                             (format " (%s)" (substring emacs-repository-version 0 10))
                           ""))
                 'face 'shadow))

        ;; Bootstraping
        (unless (file-exists-p (concat minemacs-local-dir "straight/repos/straight.el/bootstrap.el"))
          (insert-char ?\n)
          (insert-char ?\s 10)
          (insert (propertize "You are running MinEmacs for the first time."
                              'face 'warning))
          (insert-char ?\n)
          (insert-char ?\s 10)
          (insert (propertize "Please wait while MinEmacs installs the required packages."
                              'face 'warning)))

        ;; Vertical padding to bottom
        (insert-char ?\n padding-bottom)

        ;; Copyright text
        (insert-char ?\n)
        (insert-char ?\s 10)
        (insert (propertize "Minimal Emacs configuration for daily use" 'face 'shadow))
        (insert-char ?\n)
        (insert-char ?\s 10)
        (insert-text-button "github.com/abougouffa/minemacs"
                            'action (lambda (_) (browse-url "https://github.com/abougouffa/minemacs"))
                            'help-echo "Visit MinEmacs repo"
                            'follow-link t)
        (insert-char ?\n)

        (goto-char 0)
        (read-only-mode t)

        (local-set-key (kbd "<escape>") (lambda () (interactive) (minemacs-splash-kill)))
        (local-set-key (kbd "q") (lambda () (interactive) (minemacs-splash-kill)))
        (local-set-key (kbd "<mouse-1>") 'mouse-set-point)
        (local-set-key (kbd "<mouse-2>") 'operate-this-button)

        (display-buffer-same-window buffer nil)))))

(defun minemacs-splash-kill ()
  (when (get-buffer minemacs-splash-buffer-name)
    (kill-buffer minemacs-splash-buffer-name)))

;; Display splash screen
(minemacs-splash)

;; Close splash screen automatically after Emacs gets loaded
(add-hook
 'emacs-startup-hook
 (defun +minemacs-splash--kill-h ()
   (run-at-time 0.5 nil #'minemacs-splash-kill)))
#+end_src
*** me-splash.el 文件尾
#+begin_src emacs-lisp
(provide me-splash)
;;; me-splash ends here
#+end_src
** me-vars.el
:properties:
:header-args: :tangle core/me-vars.el
:end:
=me-vars.el= 一些自定义变量
*** me-vars.el 文件头
#+begin_src emacs-lisp
;;; me-vars.el -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** me-vars.el 变量定义
#+begin_src emacs-lisp
;;; MinEmacs directories

(defgroup minemacs nil
  "MinEmacs specific functionalities.")

(defgroup minemacs-core nil
  "MinEmacs core tweaks."
  :group 'minemacs)

(defgroup minemacs-ui nil
  "MinEmacs UI tweaks."
  :group 'minemacs)

(defgroup minemacs-edit nil
  "MinEmacs editor tweaks."
  :group 'minemacs)

(defgroup minemacs-prog nil
  "MinEmacs programming stuff."
  :group 'minemacs)

(defgroup minemacs-keybinding nil
  "MinEmacs keybinding."
  :group 'minemacs)

(defgroup minemacs-utils nil
  "MinEmacs utility functions."
  :group 'minemacs)

(defconst minemacs-config-dir
  (file-name-as-directory
   (or (getenv "MINEMACS_DIR")
       (getenv "MINEMACSDIR")
       "~/.minemacs.d/"))
  "MinEmacs user customization directory.")

(defconst minemacs-debug
  (and (or (getenv "MINEMACS_DEBUG") init-file-debug) t)
  "MinEmacs is started in debug mode.")

(defconst minemacs-verbose
  (and (or (getenv "MINEMACS_VERBOSE") minemacs-debug) t)
  "MinEmacs is started in verbose mode.")

(defconst minemacs-not-lazy
  (or (daemonp) (and (getenv "MINEMACS_NOT_LAZY") t))
  "Load lazy packages (minemacs-lazy-hook) immediately.")

(defcustom minemacs-msg-level
  (let ((level (string-to-number (or (getenv "MINEMACS_MSG_LEVEL") ""))))
    (cond (minemacs-verbose 4)
          ((> level 0) level)
          (t 1)))
  "Level of printed messages.
1 - `+error!'
2 - `+info!'
3 - `+log!'
4 - `+debug!'"
  :group 'minemacs-core
  :type '(choice
          (const :tag "Error" 1)
          (const :tag "Info" 2)
          (const :tag "Log" 3)
          (const :tag "Debug" 4)))

;; Derive the root directory from this file path
(defconst minemacs-root-dir
  (abbreviate-file-name
   (file-name-directory
    (directory-file-name
     (file-name-directory (file-truename load-file-name))))))
(defconst minemacs-core-dir (concat minemacs-root-dir "core/"))
(defconst minemacs-assets-dir (concat minemacs-root-dir "assets/"))
(defconst minemacs-elisp-dir (concat minemacs-root-dir "elisp/"))
(defconst minemacs-modules-dir (concat minemacs-root-dir "modules/"))
(defconst minemacs-extras-dir (concat minemacs-modules-dir "extras/"))
(defconst minemacs-local-dir (concat minemacs-root-dir "local/"))
(defconst minemacs-cache-dir (concat minemacs-local-dir "cache/"))
(defconst minemacs-loaddefs-file (concat minemacs-core-dir "me-loaddefs.el"))

(defconst os/linux (and (memq system-type '(gnu gnu/linux)) t))
(defconst os/bsd (and (memq system-type '(darwin berkeley-unix gnu/kfreebsd)) t))
(defconst os/win (and (memq system-type '(cygwin windows-nt ms-dos)) t))
(defconst os/mac (eq system-type 'darwin))

;; Should return x86_64, aarch64, armhf, ...
(defconst sys/arch (intern (car (split-string system-configuration "-"))))

(defconst emacs/features
  (mapcar #'intern
          (mapcar (apply-partially #'string-replace "_" "-")
                  (mapcar #'downcase (split-string system-configuration-features))))
  "List of symbols representing Emacs' enabled features.
Compiled from the `system-configuration-features'.")

(defcustom minemacs-fonts nil
  "Fonts to use within MinEmacs."
  :group 'minemacs-ui
  :type '(plist
          (:font-family string)
          (:font-size natnum)
          (:unicode-font-family string)
          (:variable-pitch-font-family string)
          (:variable-pitch-font-size natnum)))

(defcustom minemacs-leader-key "SPC"
  "MinEmacs leader key."
  :group 'minemacs-keybinding
  :type 'string)

(defcustom minemacs-localleader-key "SPC m"
  "MinEmacs local leader (a.k.a. mode specific) key sequence."
  :group 'minemacs-keybinding
  :type 'string)

(defcustom minemacs-global-leader-prefix "C-SPC"
  "MinEmacs general leader key."
  :group 'minemacs-keybinding
  :type 'string)

(defcustom minemacs-global-mode-prefix "C-SPC m"
  "MinEmacs general local leader (a.k.a. mode specific) key sequence."
  :group 'minemacs-keybinding
  :type 'string)

(defcustom minemacs-theme 'doom-one-light
  "The theme of MinEmacs."
  :group 'minemacs-ui
  :type 'symbol)

(defcustom minemacs-after-set-fonts-hook nil
  "Runs after setting MinEmacs fonts, runs at the end of `+set-fonts'."
  :group 'minemacs-ui
  :type 'hook)

(defcustom minemacs-after-load-theme-hook nil
  "Runs after loading MinEmacs theme, runs at the end of `+load-theme'."
  :group 'minemacs-ui
  :type 'hook)

(defcustom minemacs-after-startup-hook nil
  "This hook will be run after loading Emacs.

MinEmacs hooks will be run in this order:
1. `minemacs-after-startup-hook'
2. `minemacs-lazy-hook'"
  :group 'minemacs-core
  :type 'hook)

(defcustom minemacs-lazy-hook nil
  "This hook will be run after loading Emacs, with laziness.

MinEmacs hooks will be run in this order:
1. `minemacs-after-startup-hook'
2. `minemacs-lazy-hook'"
  :group 'minemacs-core
  :type 'hook)

;; Setup default fonts (depending on the OS)
(let ((mono-font (cond (os/linux "monospace")
                       (os/win "Lucida Console")
                       (os/mac "monospace")))
      (varp-font (cond (os/linux "monospace")
                       (os/win "Tahoma")
                       (os/mac "monospace"))))
  (defconst minemacs-default-fonts
    `(:font-family ,mono-font
      :font-size 13
      :unicode-font-family nil
      :variable-pitch-font-family ,varp-font
      :variable-pitch-font-size 13)
    "Default fonts of MinEmacs."))

(defcustom +env-save-vars
  '("PATH" "MANPATH" "CMAKE_PREFIX_PATH" "PKG_CONFIG_PATH" "LSP_USE_PLISTS")
  "List of the environment variables to saved by `+env-save'.
You need to run Emacs from terminal to get the environment variables.
MinEmacs then save them when calling `+env-save' to be used in GUI sessions as well."
  :group 'minemacs-core
  :type '(repeat string))
#+end_src
*** me-vars.el 文件尾
#+begin_src emacs-lisp
(provide me-vars)
;;; me-vars ends here
#+end_src
** me-use-package-pin-ref.el
:properties:
:header-args: :tangle core/me-use-package-pin-ref.el
:end:
=me-use-package-pin-ref.el= 使用确定版本的包
[[https://github.com/radian-software/straight.el#how-do-i-pin-package-versions-or-use-only-tagged-releases][How do I pin package versions or use only tagged releases?]]
*** me-use-package-pin-ref.el 文件头
#+begin_src emacs-lisp
;;; me-use-package-pin-ref.el --- Extend use-package to allow straight-x package pinning -*- lexical-   binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** me-use-package-pin-ref.el 扩展use-package支持固定版本的包
#+begin_src emacs-lisp
 (with-eval-after-load 'straight
   ;; Add a profile (and lockfile) for stable package revisions.
   (add-to-list 'straight-profiles '(pinned . "pinned.el"))
   (require 'straight-x))

 ;; Allow pinning versions from `use-package' using the `:pin-ref' keyword
 (with-eval-after-load 'use-package-core
   (add-to-list 'use-package-keywords :pin-ref)

   (defun use-package-normalize/:pin-ref (_name-symbol keyword args)
     (use-package-only-one (symbol-name keyword) args
       (lambda (_label arg)
         (cond
          ((stringp arg) arg)
          ((symbolp arg) (symbol-name arg))
          (t (use-package-error ":pin-ref wants a commit hash or a ref."))))))

   (defun use-package-handler/:pin-ref (name-symbol _keyword ref rest state)
     (let ((body (use-package-process-keywords name-symbol rest state)))
       (if (null ref)
           body
         `((let ((straight-current-profile 'pinned))
            (push '(,(symbol-name name-symbol) . ,ref) straight-x-pinned-packages)
            ,(macroexp-progn body)))))))
#+end_src
*** me-use-package-pin-ref.el 文件尾
#+begin_src emacs-lisp
(provide me-use-package-pin-ref)
;;; me-use-package-pin-ref ends here
#+end_src
** minemacs-loaded.el
=minemacs-loaded.el=  Virtual module loaded at end of init.el (after custom-vars.el)
Used to synchronize loading some other stuff after loading Emacs
*** minemacs-loaded.el 文件头
#+begin_src emacs-lisp
;;; minemacs-loaded.el -*- lexical-binding: t; -*-
;;; Author: donney.luck@gamil.com
;;; Commentary:
;;; Code:
#+end_src
*** minemacs-loaded.el 同步加载一些其他东西
#+begin_src emacs-lisp
 ;; Run hooks
 (when minemacs-after-startup-hook
   (setq minemacs-after-startup-hook (reverse minemacs-after-startup-hook))
   (+log! "Running %d `minemacs-after-startup-hook' hooks."
          (length minemacs-after-startup-hook))
   (run-hooks 'minemacs-after-startup-hook))

 (if minemacs-not-lazy
     (require 'minemacs-lazy)
   (+eval-when-idle-for! 2
     (require 'minemacs-lazy)))

 (+log! "Providing `minemacs-loaded'.")
#+end_src
*** minemacs-loaded.el 文件尾
#+begin_src emacs-lisp
(provide minemacs-loaded)
;;; minemacs-loaded ends here
#+end_src
